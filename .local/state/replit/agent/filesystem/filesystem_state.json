{"file_contents":{"server/firebaseAdmin.ts":{"content":"import type { RequestHandler } from \"express\";\n\n// For Firebase client-side authentication, we verify tokens differently\n// We'll use a simpler approach that doesn't require Admin SDK\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const authHeader = req.headers.authorization;\n  \n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const idToken = authHeader.split('Bearer ')[1];\n\n  try {\n    // Verify the Firebase ID token by calling Firebase REST API\n    const projectId = process.env.VITE_FIREBASE_PROJECT_ID!;\n    const apiKey = process.env.VITE_FIREBASE_API_KEY!;\n    \n    // Verify the token using Firebase's verify endpoint\n    const response = await fetch(\n      `https://identitytoolkit.googleapis.com/v1/accounts:lookup?key=${apiKey}`,\n      {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ idToken }),\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error('Token verification failed');\n    }\n\n    const data = await response.json();\n    const user = data.users?.[0];\n    \n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    // Extract user info from verified token\n    const nameParts = user.displayName?.split(' ') || ['', ''];\n    (req as any).user = {\n      uid: user.localId,\n      email: user.email,\n      firstName: nameParts[0],\n      lastName: nameParts.slice(1).join(' '),\n      profileImageUrl: user.photoUrl || null,\n    };\n    \n    next();\n  } catch (error) {\n    console.error(\"Firebase token verification error:\", error);\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n};\n","size_bytes":1712},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"server/objectAcl.ts":{"content":"// Referenced from javascript_object_storage blueprint\nimport { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\nexport enum ObjectAccessGroupType {}\n\nexport interface ObjectAccessGroup {\n  type: ObjectAccessGroupType;\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n  return granted === ObjectPermission.WRITE;\n}\n\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  if (!userId) {\n    return false;\n  }\n\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","size_bytes":2761},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/App.tsx":{"content":"import { Switch, Route, Link } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport HomePage from \"@/pages/HomePage\";\nimport SubmitAppPage from \"@/pages/SubmitAppPage\";\nimport AppDetailPage from \"@/pages/AppDetailPage\";\nimport EditAppPage from \"@/pages/EditAppPage\";\nimport NotFound from \"@/pages/not-found\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { LogIn, LogOut, User as UserIcon } from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={HomePage} />\n      <Route path=\"/submit\" component={SubmitAppPage} />\n      <Route path=\"/app/:id/edit\" component={EditAppPage} />\n      <Route path=\"/app/:id\" component={AppDetailPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction Header() {\n  const { user, isLoading, isAuthenticated, signInWithGoogle, signOut } = useAuth();\n\n  return (\n    <header className=\"border-b bg-card/50\">\n      <div className=\"container mx-auto px-4 py-3 flex items-center justify-between\">\n        <div className=\"flex items-center gap-8\">\n          <Link href=\"/\" className=\"text-xl font-heading font-bold text-primary hover-elevate active-elevate-2 px-3 py-1 rounded-md\" data-testid=\"link-home\">\n            Vibecoded Apps\n          </Link>\n        </div>\n        \n        <div className=\"flex items-center gap-3\">\n          {isLoading ? (\n            <div className=\"h-9 w-20 bg-muted animate-pulse rounded-md\" />\n          ) : isAuthenticated && user ? (\n            <>\n              <div className=\"flex items-center gap-2\">\n                <Avatar className=\"h-8 w-8\" data-testid=\"avatar-user\">\n                  <AvatarImage src={user?.profileImageUrl || undefined} />\n                  <AvatarFallback>\n                    <UserIcon className=\"h-4 w-4\" />\n                  </AvatarFallback>\n                </Avatar>\n                <span className=\"text-sm text-secondary-foreground hidden sm:inline\" data-testid=\"text-username\">\n                  {user?.firstName || user?.email || \"User\"}\n                </span>\n              </div>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-logout\" onClick={signOut}>\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                Logout\n              </Button>\n            </>\n          ) : (\n            <Button variant=\"default\" size=\"sm\" data-testid=\"button-login\" onClick={signInWithGoogle}>\n              <LogIn className=\"h-4 w-4 mr-2\" />\n              Login with Google\n            </Button>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen flex flex-col\">\n          <Header />\n          <main className=\"flex-1\">\n            <Router />\n          </main>\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3268},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"server/storage.ts":{"content":"// Referenced from javascript_database blueprint and javascript_log_in_with_replit blueprint\nimport { \n  apps,\n  type App,\n  type InsertApp,\n  categories,\n  type Category,\n  type InsertCategory,\n  tools,\n  type Tool,\n  type InsertTool,\n  tags,\n  type Tag,\n  type InsertTag,\n  appTools,\n  type AppTool,\n  type InsertAppTool,\n  appTags,\n  type AppTag,\n  type InsertAppTag,\n  reviews,\n  type Review,\n  type InsertReview,\n  comments,\n  type Comment,\n  type InsertComment,\n  toolSuggestions,\n  type ToolSuggestion,\n  type InsertToolSuggestion,\n  users,\n  type User,\n  type UpsertUser,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, asc, sql, or, ilike, and, avg, isNull, inArray } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // App operations\n  getApp(id: string, userId?: string): Promise<App | undefined>;\n  getAllApps(filters?: {\n    search?: string;\n    toolIds?: string[];\n    categoryId?: string;\n    status?: \"draft\" | \"published\";\n    sortBy?: \"newest\" | \"oldest\" | \"popular\" | \"rating\";\n    userId?: string; // To filter by creator\n  }): Promise<App[]>;\n  createApp(app: InsertApp): Promise<App>;\n  updateApp(id: string, appData: Partial<InsertApp>): Promise<App>;\n  updateAppStatus(id: string, status: \"draft\" | \"published\"): Promise<void>;\n  incrementViewCount(id: string): Promise<void>;\n  \n  // Category operations\n  getAllCategories(): Promise<Category[]>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  getCategoryById(id: string): Promise<Category | undefined>;\n  \n  // Tool operations\n  getAllTools(): Promise<Tool[]>;\n  getToolById(id: string): Promise<Tool | undefined>;\n  createTool(tool: InsertTool): Promise<Tool>;\n  \n  // Tag operations\n  getAllTags(): Promise<Tag[]>;\n  getOrCreateTag(name: string): Promise<Tag>;\n  getTagById(id: string): Promise<Tag | undefined>;\n  \n  // App-Tool relationship operations\n  addToolToApp(appId: string, toolId: string): Promise<void>;\n  getToolsForApp(appId: string): Promise<Tool[]>;\n  removeToolFromApp(appId: string, toolId: string): Promise<void>;\n  \n  // App-Tag relationship operations\n  addTagToApp(appId: string, tagId: string): Promise<void>;\n  getTagsForApp(appId: string): Promise<Tag[]>;\n  removeTagFromApp(appId: string, tagId: string): Promise<void>;\n  \n  // Review operations\n  createReview(review: InsertReview): Promise<Review>;\n  updateReview(appId: string, userId: string, rating: number, body?: string): Promise<Review>;\n  getReviewsByApp(appId: string): Promise<Array<Review & { user: User | null }>>;\n  getUserReviewForApp(appId: string, userId: string): Promise<Review | undefined>;\n  updateAppRatingStats(appId: string): Promise<void>;\n  \n  // Comment operations\n  createComment(comment: InsertComment): Promise<Comment>;\n  getCommentsByApp(appId: string, parentCommentId?: string | null): Promise<Array<Comment & { user: User | null }>>;\n  getCommentById(id: string): Promise<Comment | undefined>;\n  \n  // Tool suggestion operations\n  createToolSuggestion(suggestion: InsertToolSuggestion): Promise<ToolSuggestion>;\n  getPendingToolSuggestions(): Promise<ToolSuggestion[]>;\n  approveToolSuggestion(suggestionId: string, toolData: InsertTool): Promise<Tool>;\n  rejectToolSuggestion(suggestionId: string): Promise<void>;\n  \n  // User operations\n  getUserById(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // ============================================================================\n  // APP OPERATIONS\n  // ============================================================================\n  \n  async getApp(id: string, userId?: string): Promise<App | undefined> {\n    const [app] = await db.select().from(apps).where(eq(apps.id, id));\n    \n    if (!app) return undefined;\n    \n    // Only show draft apps to their creators\n    if (app.status === \"draft\" && app.creatorId !== userId) {\n      return undefined;\n    }\n    \n    return app;\n  }\n\n  async getAllApps(filters?: {\n    search?: string;\n    toolIds?: string[];\n    categoryId?: string;\n    status?: \"draft\" | \"published\";\n    sortBy?: \"newest\" | \"oldest\" | \"popular\" | \"rating\";\n    userId?: string;\n  }): Promise<App[]> {\n    const conditions = [];\n\n    // Filter by status (default to published only)\n    if (filters?.userId) {\n      // If userId is provided, show their drafts + all published\n      conditions.push(\n        or(\n          eq(apps.status, \"published\"),\n          and(eq(apps.status, \"draft\"), eq(apps.creatorId, filters.userId))\n        )\n      );\n    } else if (filters?.status) {\n      conditions.push(eq(apps.status, filters.status));\n    } else {\n      // Default: only published\n      conditions.push(eq(apps.status, \"published\"));\n    }\n\n    // Search across name and description\n    if (filters?.search) {\n      const searchTerm = `%${filters.search}%`;\n      conditions.push(\n        or(\n          ilike(apps.name, searchTerm),\n          ilike(apps.shortDescription, searchTerm),\n          ilike(apps.fullDescription, searchTerm)\n        )\n      );\n    }\n\n    // Filter by category\n    if (filters?.categoryId) {\n      conditions.push(eq(apps.categoryId, filters.categoryId));\n    }\n\n    // Filter by tools (apps that have at least one of the specified tools)\n    if (filters?.toolIds && filters.toolIds.length > 0) {\n      conditions.push(\n        sql`EXISTS (\n          SELECT 1 FROM ${appTools} \n          WHERE ${appTools.appId} = ${apps.id} \n          AND ${appTools.toolId} IN ${filters.toolIds}\n        )`\n      );\n    }\n\n    // Build base query with where clause\n    let query = db.select().from(apps);\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions)) as typeof query;\n    }\n\n    // Sort\n    switch (filters?.sortBy) {\n      case \"oldest\":\n        return await query.orderBy(asc(apps.createdAt));\n      case \"popular\":\n        return await query.orderBy(desc(apps.viewCount));\n      case \"rating\":\n        return await query.orderBy(desc(apps.averageRating), desc(apps.ratingCount));\n      case \"newest\":\n      default:\n        return await query.orderBy(desc(apps.createdAt));\n    }\n  }\n\n  async createApp(appData: InsertApp): Promise<App> {\n    const [app] = await db.insert(apps).values(appData).returning();\n    return app;\n  }\n\n  async updateApp(id: string, appData: Partial<InsertApp>): Promise<App> {\n    const [app] = await db\n      .update(apps)\n      .set({ ...appData, updatedAt: new Date() })\n      .where(eq(apps.id, id))\n      .returning();\n    return app;\n  }\n\n  async updateAppStatus(id: string, status: \"draft\" | \"published\"): Promise<void> {\n    await db\n      .update(apps)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(apps.id, id));\n  }\n\n  async incrementViewCount(id: string): Promise<void> {\n    await db\n      .update(apps)\n      .set({ viewCount: sql`${apps.viewCount} + 1` })\n      .where(eq(apps.id, id));\n  }\n\n  // ============================================================================\n  // CATEGORY OPERATIONS\n  // ============================================================================\n\n  async getAllCategories(): Promise<Category[]> {\n    return await db.select().from(categories).orderBy(asc(categories.name));\n  }\n\n  async createCategory(categoryData: InsertCategory): Promise<Category> {\n    const [category] = await db.insert(categories).values(categoryData).returning();\n    return category;\n  }\n\n  async getCategoryById(id: string): Promise<Category | undefined> {\n    const [category] = await db.select().from(categories).where(eq(categories.id, id));\n    return category || undefined;\n  }\n\n  // ============================================================================\n  // TOOL OPERATIONS\n  // ============================================================================\n\n  async getAllTools(): Promise<Tool[]> {\n    return await db.select().from(tools).orderBy(asc(tools.name));\n  }\n\n  async getToolById(id: string): Promise<Tool | undefined> {\n    const [tool] = await db.select().from(tools).where(eq(tools.id, id));\n    return tool || undefined;\n  }\n\n  async createTool(toolData: InsertTool): Promise<Tool> {\n    const [tool] = await db.insert(tools).values(toolData).returning();\n    return tool;\n  }\n\n  // ============================================================================\n  // TAG OPERATIONS\n  // ============================================================================\n\n  async getAllTags(): Promise<Tag[]> {\n    return await db.select().from(tags).orderBy(asc(tags.name));\n  }\n\n  async getOrCreateTag(name: string): Promise<Tag> {\n    const normalizedName = name.toLowerCase().trim();\n    \n    // Try to find existing tag\n    const [existingTag] = await db\n      .select()\n      .from(tags)\n      .where(eq(tags.name, normalizedName));\n    \n    if (existingTag) {\n      return existingTag;\n    }\n    \n    // Create new tag\n    const [newTag] = await db\n      .insert(tags)\n      .values({ name: normalizedName })\n      .returning();\n    \n    return newTag;\n  }\n\n  async getTagById(id: string): Promise<Tag | undefined> {\n    const [tag] = await db.select().from(tags).where(eq(tags.id, id));\n    return tag || undefined;\n  }\n\n  // ============================================================================\n  // APP-TOOL RELATIONSHIP OPERATIONS\n  // ============================================================================\n\n  async addToolToApp(appId: string, toolId: string): Promise<void> {\n    await db\n      .insert(appTools)\n      .values({ appId, toolId })\n      .onConflictDoNothing();\n  }\n\n  async getToolsForApp(appId: string): Promise<Tool[]> {\n    const result = await db\n      .select({\n        id: tools.id,\n        name: tools.name,\n        websiteUrl: tools.websiteUrl,\n        logoUrl: tools.logoUrl,\n      })\n      .from(appTools)\n      .innerJoin(tools, eq(appTools.toolId, tools.id))\n      .where(eq(appTools.appId, appId))\n      .orderBy(asc(tools.name));\n    \n    return result;\n  }\n\n  async removeToolFromApp(appId: string, toolId: string): Promise<void> {\n    await db\n      .delete(appTools)\n      .where(and(eq(appTools.appId, appId), eq(appTools.toolId, toolId)));\n  }\n\n  // ============================================================================\n  // APP-TAG RELATIONSHIP OPERATIONS\n  // ============================================================================\n\n  async addTagToApp(appId: string, tagId: string): Promise<void> {\n    await db\n      .insert(appTags)\n      .values({ appId, tagId })\n      .onConflictDoNothing();\n  }\n\n  async getTagsForApp(appId: string): Promise<Tag[]> {\n    const result = await db\n      .select({\n        id: tags.id,\n        name: tags.name,\n      })\n      .from(appTags)\n      .innerJoin(tags, eq(appTags.tagId, tags.id))\n      .where(eq(appTags.appId, appId))\n      .orderBy(asc(tags.name));\n    \n    return result;\n  }\n\n  async removeTagFromApp(appId: string, tagId: string): Promise<void> {\n    await db\n      .delete(appTags)\n      .where(and(eq(appTags.appId, appId), eq(appTags.tagId, tagId)));\n  }\n\n  // ============================================================================\n  // REVIEW OPERATIONS\n  // ============================================================================\n\n  async createReview(reviewData: InsertReview): Promise<Review> {\n    const [review] = await db.insert(reviews).values(reviewData).returning();\n    \n    // Update app rating stats\n    await this.updateAppRatingStats(reviewData.appId);\n    \n    return review;\n  }\n\n  async updateReview(appId: string, userId: string, rating: number, body?: string): Promise<Review> {\n    const [review] = await db\n      .update(reviews)\n      .set({ \n        rating, \n        body: body || null,\n        updatedAt: new Date() \n      })\n      .where(and(eq(reviews.appId, appId), eq(reviews.userId, userId)))\n      .returning();\n    \n    // Update app rating stats\n    await this.updateAppRatingStats(appId);\n    \n    return review;\n  }\n\n  async getReviewsByApp(appId: string): Promise<Array<Review & { user: User | null }>> {\n    const results = await db\n      .select({\n        id: reviews.id,\n        appId: reviews.appId,\n        userId: reviews.userId,\n        rating: reviews.rating,\n        title: reviews.title,\n        body: reviews.body,\n        createdAt: reviews.createdAt,\n        updatedAt: reviews.updatedAt,\n        user: users,\n      })\n      .from(reviews)\n      .leftJoin(users, eq(reviews.userId, users.id))\n      .where(eq(reviews.appId, appId))\n      .orderBy(desc(reviews.createdAt));\n    \n    return results.map(r => ({\n      id: r.id,\n      appId: r.appId,\n      userId: r.userId,\n      rating: r.rating,\n      title: r.title,\n      body: r.body,\n      createdAt: r.createdAt,\n      updatedAt: r.updatedAt,\n      user: r.user,\n    }));\n  }\n\n  async getUserReviewForApp(appId: string, userId: string): Promise<Review | undefined> {\n    const [review] = await db\n      .select()\n      .from(reviews)\n      .where(and(eq(reviews.appId, appId), eq(reviews.userId, userId)));\n    \n    return review || undefined;\n  }\n\n  async deleteReview(appId: string, userId: string, deleteRating: boolean): Promise<void> {\n    if (deleteRating) {\n      await db\n        .delete(reviews)\n        .where(and(eq(reviews.appId, appId), eq(reviews.userId, userId)));\n    } else {\n      await db\n        .update(reviews)\n        .set({ \n          body: null,\n          updatedAt: new Date() \n        })\n        .where(and(eq(reviews.appId, appId), eq(reviews.userId, userId)));\n    }\n    \n    await this.updateAppRatingStats(appId);\n  }\n\n  async updateAppRatingStats(appId: string): Promise<void> {\n    const result = await db\n      .select({\n        avgRating: avg(reviews.rating),\n        count: sql<number>`COUNT(*)::int`,\n      })\n      .from(reviews)\n      .where(eq(reviews.appId, appId));\n    \n    const avgRating = result[0]?.avgRating ? Number(result[0].avgRating).toFixed(2) : \"0.00\";\n    const ratingCount = result[0]?.count || 0;\n    \n    await db\n      .update(apps)\n      .set({\n        averageRating: avgRating,\n        ratingCount: ratingCount,\n        updatedAt: new Date(),\n      })\n      .where(eq(apps.id, appId));\n  }\n\n  // ============================================================================\n  // COMMENT OPERATIONS\n  // ============================================================================\n\n  async createComment(commentData: InsertComment): Promise<Comment> {\n    const [comment] = await db.insert(comments).values(commentData).returning();\n    return comment;\n  }\n\n  async getCommentsByApp(\n    appId: string, \n    parentCommentId?: string | null\n  ): Promise<Array<Comment & { user: User | null }>> {\n    const conditions = [eq(comments.appId, appId)];\n    \n    // Filter by parent comment ID (null for top-level, specific ID for replies)\n    if (parentCommentId === null || parentCommentId === undefined) {\n      conditions.push(isNull(comments.parentCommentId));\n    } else {\n      conditions.push(eq(comments.parentCommentId, parentCommentId));\n    }\n    \n    const results = await db\n      .select({\n        id: comments.id,\n        content: comments.content,\n        appId: comments.appId,\n        userId: comments.userId,\n        parentCommentId: comments.parentCommentId,\n        createdAt: comments.createdAt,\n        user: users,\n      })\n      .from(comments)\n      .leftJoin(users, eq(comments.userId, users.id))\n      .where(and(...conditions))\n      .orderBy(desc(comments.createdAt));\n    \n    return results.map(r => ({\n      id: r.id,\n      content: r.content,\n      appId: r.appId,\n      userId: r.userId,\n      parentCommentId: r.parentCommentId,\n      createdAt: r.createdAt,\n      user: r.user,\n    }));\n  }\n\n  async getCommentById(id: string): Promise<Comment | undefined> {\n    const [comment] = await db.select().from(comments).where(eq(comments.id, id));\n    return comment || undefined;\n  }\n\n  // ============================================================================\n  // TOOL SUGGESTION OPERATIONS\n  // ============================================================================\n\n  async createToolSuggestion(suggestionData: InsertToolSuggestion): Promise<ToolSuggestion> {\n    const [suggestion] = await db\n      .insert(toolSuggestions)\n      .values(suggestionData)\n      .returning();\n    \n    return suggestion;\n  }\n\n  async getPendingToolSuggestions(): Promise<ToolSuggestion[]> {\n    return await db\n      .select()\n      .from(toolSuggestions)\n      .where(eq(toolSuggestions.status, \"pending\"))\n      .orderBy(asc(toolSuggestions.createdAt));\n  }\n\n  async approveToolSuggestion(suggestionId: string, toolData: InsertTool): Promise<Tool> {\n    // Get the suggestion\n    const [suggestion] = await db\n      .select()\n      .from(toolSuggestions)\n      .where(eq(toolSuggestions.id, suggestionId));\n    \n    if (!suggestion) {\n      throw new Error(\"Tool suggestion not found\");\n    }\n    \n    // Create the tool\n    const [tool] = await db.insert(tools).values(toolData).returning();\n    \n    // Update the suggestion status\n    await db\n      .update(toolSuggestions)\n      .set({ status: \"approved\" })\n      .where(eq(toolSuggestions.id, suggestionId));\n    \n    // Find all apps with matching tool suggestions and add the tool to them\n    const matchingSuggestions = await db\n      .select()\n      .from(toolSuggestions)\n      .where(\n        and(\n          eq(toolSuggestions.suggestedName, suggestion.suggestedName),\n          eq(toolSuggestions.status, \"pending\")\n        )\n      );\n    \n    // Add tool to all matching apps\n    for (const matchingSuggestion of matchingSuggestions) {\n      await this.addToolToApp(matchingSuggestion.appId, tool.id);\n      \n      // Update suggestion status\n      await db\n        .update(toolSuggestions)\n        .set({ status: \"approved\" })\n        .where(eq(toolSuggestions.id, matchingSuggestion.id));\n    }\n    \n    return tool;\n  }\n\n  async rejectToolSuggestion(suggestionId: string): Promise<void> {\n    await db\n      .update(toolSuggestions)\n      .set({ status: \"rejected\" })\n      .where(eq(toolSuggestions.id, suggestionId));\n  }\n\n  // ============================================================================\n  // USER OPERATIONS\n  // ============================================================================\n\n  async getUserById(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    \n    return user;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":18779},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/FilterPanel.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Button } from \"@/components/ui/button\";\nimport { X } from \"lucide-react\";\nimport type { Category, Tool } from \"@shared/schema\";\n\ninterface FilterPanelProps {\n  selectedToolIds: string[];\n  onToolIdsChange: (toolIds: string[]) => void;\n  selectedCategoryId: string;\n  onCategoryIdChange: (categoryId: string) => void;\n  sortBy: \"newest\" | \"oldest\" | \"popular\";\n  onSortChange: (sort: \"newest\" | \"oldest\" | \"popular\") => void;\n}\n\nexport function FilterPanel({\n  selectedToolIds,\n  onToolIdsChange,\n  selectedCategoryId,\n  onCategoryIdChange,\n  sortBy,\n  onSortChange,\n}: FilterPanelProps) {\n  const { data: categories, isLoading: categoriesLoading } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const { data: tools, isLoading: toolsLoading } = useQuery<Tool[]>({\n    queryKey: [\"/api/tools\"],\n  });\n\n  const hasActiveFilters = selectedToolIds.length > 0 || selectedCategoryId;\n\n  const clearFilters = () => {\n    onToolIdsChange([]);\n    onCategoryIdChange(\"\");\n  };\n\n  const toggleTool = (toolId: string) => {\n    if (selectedToolIds.includes(toolId)) {\n      onToolIdsChange(selectedToolIds.filter((id) => id !== toolId));\n    } else {\n      onToolIdsChange([...selectedToolIds, toolId]);\n    }\n  };\n\n  return (\n    <Card className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"font-display font-semibold text-lg\">Filters</h3>\n        {hasActiveFilters && (\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={clearFilters}\n            data-testid=\"button-clear-filters\"\n          >\n            <X className=\"w-4 h-4 mr-1\" />\n            Clear\n          </Button>\n        )}\n      </div>\n\n      <div className=\"space-y-4\">\n        <div>\n          <h4 className=\"font-semibold text-sm mb-3\">Sort By</h4>\n          <RadioGroup value={sortBy} onValueChange={(v) => onSortChange(v as any)}>\n            <div className=\"flex items-center space-x-2\">\n              <RadioGroupItem value=\"newest\" id=\"newest\" data-testid=\"radio-newest\" />\n              <Label htmlFor=\"newest\" className=\"cursor-pointer\">Newest First</Label>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <RadioGroupItem value=\"oldest\" id=\"oldest\" data-testid=\"radio-oldest\" />\n              <Label htmlFor=\"oldest\" className=\"cursor-pointer\">Oldest First</Label>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <RadioGroupItem value=\"popular\" id=\"popular\" data-testid=\"radio-popular\" />\n              <Label htmlFor=\"popular\" className=\"cursor-pointer\">Most Popular</Label>\n            </div>\n          </RadioGroup>\n        </div>\n\n        <div className=\"border-t pt-4\">\n          <h4 className=\"font-semibold text-sm mb-3\">\n            Vibecoding Tools\n            {selectedToolIds.length > 0 && (\n              <span className=\"ml-2 text-xs text-muted-foreground\">({selectedToolIds.length})</span>\n            )}\n          </h4>\n          {toolsLoading ? (\n            <div className=\"space-y-2\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"h-6 bg-muted rounded animate-pulse\" />\n              ))}\n            </div>\n          ) : (\n            <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n              {tools?.map((tool) => (\n                <div key={tool.id} className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id={tool.id}\n                    checked={selectedToolIds.includes(tool.id)}\n                    onCheckedChange={() => toggleTool(tool.id)}\n                    data-testid={`checkbox-tool-${tool.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                  />\n                  <Label htmlFor={tool.id} className=\"cursor-pointer text-sm\">\n                    {tool.name}\n                  </Label>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        <div className=\"border-t pt-4\">\n          <h4 className=\"font-semibold text-sm mb-3\">Category</h4>\n          {categoriesLoading ? (\n            <div className=\"space-y-2\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"h-6 bg-muted rounded animate-pulse\" />\n              ))}\n            </div>\n          ) : (\n            <RadioGroup value={selectedCategoryId} onValueChange={onCategoryIdChange}>\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"\" id=\"all-categories\" data-testid=\"radio-all-categories\" />\n                <Label htmlFor=\"all-categories\" className=\"cursor-pointer text-sm\">All Categories</Label>\n              </div>\n              {categories?.map((category) => (\n                <div key={category.id} className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value={category.id} id={category.id} data-testid={`radio-category-${category.name.toLowerCase().replace(/\\s+/g, '-')}`} />\n                  <Label htmlFor={category.id} className=\"cursor-pointer text-sm\">\n                    {category.name}\n                  </Label>\n                </div>\n              ))}\n            </RadioGroup>\n          )}\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":5521},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        display: [\"Plus Jakarta Sans\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4104},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"design_guidelines.md":{"content":"# Vibecoded Apps Marketplace - Design Guidelines\n\n## Design Approach: Reference-Based (Marketplace Discovery)\n\n**Primary References:** Product Hunt (discovery patterns), Dribbble (visual showcase), App Store (app presentation)\n\n**Design Philosophy:** Create a vibrant, modern marketplace that celebrates creativity and makes discovery delightful. The interface should feel energetic and inspire builders while maintaining professional clarity.\n\n---\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Light Mode:**\n- **Primary:** 262 80% 50% (vibrant purple - represents creativity and AI innovation)\n- **Background:** 0 0% 100% (pure white)\n- **Surface:** 240 5% 96% (soft gray for cards)\n- **Text Primary:** 220 13% 18% (deep charcoal)\n- **Text Secondary:** 220 9% 46% (medium gray)\n- **Border:** 220 13% 91% (subtle dividers)\n- **Success/Launch:** 142 76% 36% (vivid green for CTA)\n\n**Dark Mode:**\n- **Primary:** 262 70% 60% (lighter purple for dark backgrounds)\n- **Background:** 222 47% 11% (rich dark blue-gray)\n- **Surface:** 217 33% 17% (elevated surface)\n- **Text Primary:** 210 40% 98% (near white)\n- **Text Secondary:** 215 20% 65% (muted light gray)\n- **Border:** 217 33% 24% (subtle borders)\n- **Success/Launch:** 142 70% 45% (adjusted green)\n\n**Tool Badge Colors** (apply to both modes with adjusted brightness):\n- Replit Agent: 262 80% 50%\n- Bolt.new: 45 100% 51%\n- v0: 0 0% 15%\n- Cursor: 200 100% 45%\n- Claude: 33 82% 55%\n- ChatGPT: 171 65% 45%\n- Lovable: 340 75% 55%\n- Windsurf: 195 80% 48%\n\n### B. Typography\n\n**Font Families:**\n- **Primary (UI/Body):** Inter (400, 500, 600, 700)\n- **Display (Headlines):** Plus Jakarta Sans (600, 700, 800)\n- **Mono (Code/Tags):** JetBrains Mono (400, 500)\n\n**Type Scale:**\n- Hero/Display: text-5xl md:text-6xl lg:text-7xl font-bold\n- Page Title: text-3xl md:text-4xl font-bold\n- Section Header: text-2xl md:text-3xl font-semibold\n- Card Title: text-xl font-semibold\n- Body: text-base leading-relaxed\n- Small/Meta: text-sm text-secondary\n- Tiny/Tags: text-xs font-medium\n\n### C. Layout System\n\n**Spacing Primitives:** Use Tailwind units of 2, 4, 6, 8, 12, 16, 20, 24\n- Micro spacing (gaps, padding): 2, 4\n- Component spacing: 6, 8\n- Section spacing: 12, 16, 20, 24\n\n**Grid Systems:**\n- **App Cards:** grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\n- **Container:** max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\n- **Detail Layout:** 2-column (lg:grid-cols-3, main content 2/3, sidebar 1/3)\n\n### D. Component Library\n\n**Navigation:**\n- Sticky header with backdrop blur (backdrop-blur-xl bg-background/80)\n- Logo + search bar (prominent, centered) + Submit App CTA button\n- Mobile: hamburger menu, full-screen overlay\n\n**App Cards:**\n- Aspect ratio 16:9 preview image with hover lift (hover:-translate-y-1 transition-transform)\n- Gradient overlay on image bottom for text contrast\n- Tool badges as small pills overlaid on top-right of image\n- Short description (2 lines, truncate with ellipsis)\n- Launch button: full-width, primary color, with external link icon\n- Card background: surface color with subtle border, rounded-2xl\n- Hover state: shadow-xl transition\n\n**Detail Page Hero:**\n- Full-width preview image section (max-h-96 object-cover)\n- Gradient overlay at bottom\n- Floating info card overlapping image bottom (contains app name, creator, tools)\n- Launch button: large, prominent, success green with animation\n\n**Key Learnings Card:**\n- Distinct visual treatment: border-l-4 border-primary bg-surface/50\n- \"💡 Key Learnings\" header with icon\n- Markdown rendering with syntax highlighting (use Prism.js via CDN)\n- Max-width for readability (max-w-3xl)\n\n**Tool Badges:**\n- Pill shape: px-3 py-1 rounded-full\n- Tool-specific background colors (semi-transparent: bg-[color]/10)\n- Tool-specific text colors\n- Small icon (16x16) + tool name\n- Use Heroicons for generic icons via CDN\n\n**Category Badges:**\n- Outlined style: border-2 px-4 py-1 rounded-lg\n- Neutral colors: border-border text-secondary\n- Icon + category name\n\n**Filters Panel:**\n- Sticky sidebar (desktop) or collapsible drawer (mobile)\n- Checkbox groups for tools and categories\n- Radio buttons for sorting\n- Clear filters button\n- Active filter count indicator\n\n**Search Bar:**\n- Prominent in header: min-w-[320px] on desktop\n- Search icon left, clear button right\n- Live results dropdown with highlighted matches\n- Recent searches (if implementing)\n\n**Launch Button:**\n- Primary: bg-success text-white px-8 py-3 rounded-lg font-semibold\n- Icon: external link (Heroicons arrow-top-right-on-square)\n- Hover: scale-105 shadow-lg transition\n- Active state: scale-95\n\n**Pagination:**\n- Centered below grid\n- Previous/Next with page numbers\n- Current page: primary color, others: border-border\n- Disabled state: opacity-50\n\n### E. Imagery & Assets\n\n**Hero Section:**\n- Full-width banner showcasing featured apps mosaic or abstract AI visualization\n- Height: min-h-[500px] md:min-h-[600px]\n- Overlay gradient for text contrast\n\n**App Preview Images:**\n- Required aspect ratio: 16:9\n- Fallback: gradient background with app name\n- Lazy loading for performance\n- CDN optimization\n\n**Icons:**\n- Use Heroicons (outline style) via CDN\n- Tool logos: reference actual brand assets or use placeholder with tool name\n- Size: 20x20 (small), 24x24 (medium), 32x32 (large)\n\n### F. Interaction Patterns\n\n**Hover States:**\n- Cards: lift + shadow increase\n- Buttons: scale + shadow\n- Links: color shift to primary\n\n**Loading States:**\n- Skeleton screens for cards (shimmer effect)\n- Spinner for search results\n- Progressive image loading with blur-up\n\n**Empty States:**\n- Centered illustration (use SVG placeholder or undraw.co)\n- Helpful message + CTA to submit first app\n- Search no results: suggest clearing filters\n\n**Form Validation:**\n- Inline errors below fields (text-red-600)\n- Success state: green checkmark\n- Character counters for limited fields\n- Required field indicators (*)\n\n---\n\n## Page-Specific Guidelines\n\n### Homepage\n- Hero: gradient background (from primary to purple-800) with abstract shapes, headline \"Discover Amazing AI-Built Apps\", search bar front and center\n- Featured section: 3-card horizontal scroll showcasing recent/popular apps\n- Main grid: all apps with filters sidebar (desktop) or top filters (mobile)\n- Footer: newsletter signup, social links, about, submit app CTA\n\n### Submit App Page\n- Clean form layout: max-w-3xl centered\n- Step indicator for sections (optional: multi-step form)\n- Image upload: drag-drop zone with preview\n- Markdown preview for descriptions and key learnings (split view: edit/preview tabs)\n- Submit button: prominent success color\n\n### App Detail Page\n- Hero image with gradient overlay\n- Info card: app name, creator, tools, category, launch count\n- Large Launch App button above fold\n- Description section: max-w-prose for readability\n- Key Learnings: dedicated card with distinct styling\n- Sidebar: creator info, stats, related apps\n\n---\n\n## Responsive Breakpoints\n\n- Mobile: < 768px (stack everything, full-width cards)\n- Tablet: 768px - 1024px (2-column grid)\n- Desktop: > 1024px (3-column grid, sidebar filters)\n\n---\n\n## Accessibility & Performance\n\n- Maintain WCAG AA contrast ratios\n- Focus indicators: ring-2 ring-primary ring-offset-2\n- Keyboard navigation for all interactive elements\n- Alt text for all images\n- Loading states prevent layout shift\n- Optimize images: WebP format, lazy loading\n\nThis design creates a vibrant, modern marketplace that celebrates creativity while maintaining professional usability. The purple primary color represents AI innovation, while the green launch button creates clear visual hierarchy for the primary action.","size_bytes":7619},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/AppCard.tsx":{"content":"import { Link } from \"wouter\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport type { App, Tool } from \"@shared/schema\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card } from \"@/components/ui/card\";\nimport { ExternalLink, Star } from \"lucide-react\";\nimport { getToolColor } from \"../lib/utils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface AppCardProps {\n  app: App & { tools?: Tool[] };\n}\n\nexport function AppCard({ app }: AppCardProps) {\n  const { data: ratingData } = useQuery<{ averageRating: number | null }>({\n    queryKey: [\"/api/apps\", app.id, \"rating\"],\n  });\n  const launchMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", `/api/apps/${app.id}/launch`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/apps/${app.id}`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/apps\"] });\n    },\n  });\n\n  const handleLaunch = (e: React.MouseEvent) => {\n    e.preventDefault();\n    window.open(app.launchUrl, \"_blank\", \"noopener,noreferrer\");\n    launchMutation.mutate();\n  };\n\n  return (\n    <Link href={`/app/${app.id}`}>\n      <Card className=\"group overflow-hidden rounded-2xl transition-all duration-300 hover:-translate-y-1 hover:shadow-xl cursor-pointer border\" data-testid={`card-app-${app.id}`}>\n        <div className=\"relative aspect-video overflow-hidden\">\n          <img \n            src={app.screenshotUrl} \n            alt={app.name}\n            className=\"w-full h-full object-cover transition-transform duration-300 group-hover:scale-105\"\n            data-testid={`img-preview-${app.id}`}\n          />\n          <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent\" />\n          \n          <div className=\"absolute top-3 right-3 flex flex-wrap gap-1.5 justify-end max-w-[70%]\">\n            {app.tools?.slice(0, 2).map((tool) => (\n              <Badge \n                key={tool.id}\n                className={`${getToolColor(tool.name)} text-xs font-medium px-2 py-0.5 no-default-hover-elevate`}\n                data-testid={`badge-tool-${tool.name.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                {tool.name}\n              </Badge>\n            ))}\n            {(app.tools?.length || 0) > 2 && (\n              <Badge \n                className=\"bg-background/80 text-foreground text-xs font-medium px-2 py-0.5 no-default-hover-elevate\"\n                data-testid=\"badge-more-tools\"\n              >\n                +{(app.tools?.length || 0) - 2}\n              </Badge>\n            )}\n          </div>\n          \n          <div className=\"absolute bottom-3 left-3 right-3\">\n            <h3 className=\"text-white font-display font-semibold text-xl mb-1 line-clamp-1\" data-testid={`text-app-name-${app.id}`}>\n              {app.name}\n            </h3>\n          </div>\n        </div>\n\n        <div className=\"p-5\">\n          <p className=\"text-sm text-muted-foreground line-clamp-2 mb-3\" data-testid={`text-description-${app.id}`}>\n            {app.shortDescription}\n          </p>\n\n          {ratingData?.averageRating !== null && ratingData?.averageRating !== undefined && (\n            <div className=\"flex items-center gap-1.5 mb-3\">\n              <div className=\"flex\">\n                {[1, 2, 3, 4, 5].map((star) => (\n                  <Star\n                    key={star}\n                    className={`h-3.5 w-3.5 ${\n                      star <= Math.round(ratingData.averageRating!)\n                        ? \"fill-yellow-400 text-yellow-400\"\n                        : \"text-muted-foreground\"\n                    }`}\n                  />\n                ))}\n              </div>\n              <span className=\"text-xs text-muted-foreground\" data-testid={`text-rating-${app.id}`}>\n                {ratingData.averageRating.toFixed(1)}\n              </span>\n            </div>\n          )}\n\n          <div className=\"flex items-center justify-between gap-3\">\n            <Badge variant=\"outline\" className=\"text-xs\" data-testid={`badge-category-${app.id}`}>\n              {app.category?.name || 'Uncategorized'}\n            </Badge>\n            \n            <button\n              onClick={handleLaunch}\n              className=\"flex items-center gap-1.5 text-sm font-semibold text-chart-2 hover:text-chart-2/80 transition-colors\"\n              data-testid={`button-launch-${app.id}`}\n            >\n              Launch\n              <ExternalLink className=\"w-4 h-4\" />\n            </button>\n          </div>\n        </div>\n      </Card>\n    </Link>\n  );\n}\n","size_bytes":4593},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const headers: HeadersInit = data ? { \"Content-Type\": \"application/json\" } : {};\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: 'include', // Send session cookie\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: 'include', // Send session cookie\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1461},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/pages/HomePage.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport type { App } from \"@shared/schema\";\nimport { AppCard } from \"../components/AppCard\";\nimport { SearchBar } from \"../components/SearchBar\";\nimport { FilterPanel } from \"../components/FilterPanel\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sparkles, Plus } from \"lucide-react\";\n\nexport default function HomePage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedToolIds, setSelectedToolIds] = useState<string[]>([]);\n  const [selectedCategoryId, setSelectedCategoryId] = useState<string>(\"\");\n  const [sortBy, setSortBy] = useState<\"newest\" | \"oldest\" | \"popular\">(\"newest\");\n  const [page, setPage] = useState(1);\n  const itemsPerPage = 12;\n\n  const buildQueryString = () => {\n    const params = new URLSearchParams();\n    if (searchQuery) params.append(\"search\", searchQuery);\n    if (selectedToolIds.length > 0) {\n      selectedToolIds.forEach(toolId => params.append(\"tools\", toolId));\n    }\n    if (selectedCategoryId) params.append(\"category\", selectedCategoryId);\n    params.append(\"sortBy\", sortBy);\n    return params.toString();\n  };\n\n  const queryString = buildQueryString();\n  const { data: apps, isLoading } = useQuery<App[]>({\n    queryKey: [\"/api/apps?\" + queryString],\n  });\n\n  const filteredApps = apps || [];\n  const totalPages = Math.ceil(filteredApps.length / itemsPerPage);\n  const paginatedApps = filteredApps.slice((page - 1) * itemsPerPage, page * itemsPerPage);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"relative overflow-hidden bg-gradient-to-br from-primary via-purple-800 to-primary min-h-[500px] md:min-h-[600px] flex items-center justify-center\">\n        <div className=\"absolute inset-0 bg-black/20\" />\n        <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_30%_50%,rgba(255,255,255,0.1),transparent_50%)]\" />\n        \n        <div className=\"relative z-10 text-center px-4 max-w-5xl mx-auto\">\n          <div className=\"flex items-center justify-center gap-3 mb-6\">\n            <Sparkles className=\"w-12 h-12 text-white\" />\n          </div>\n          <h1 className=\"text-5xl md:text-6xl lg:text-7xl font-display font-bold text-white mb-6\">\n            Discover Amazing AI-Built Apps\n          </h1>\n          <p className=\"text-xl md:text-2xl text-white/90 mb-12 max-w-3xl mx-auto\">\n            Explore apps created with AI-powered coding tools. Get inspired, learn from others, and share your own creations.\n          </p>\n          \n          <div className=\"max-w-2xl mx-auto mb-8\">\n            <SearchBar value={searchQuery} onChange={setSearchQuery} />\n          </div>\n          \n          <div className=\"flex flex-wrap gap-4 justify-center\">\n            <Link href=\"/submit\">\n              <Button \n                size=\"lg\" \n                className=\"bg-chart-2 hover:bg-chart-2/90 text-white font-semibold px-8 shadow-xl\"\n                data-testid=\"button-submit-app\"\n              >\n                <Plus className=\"w-5 h-5 mr-2\" />\n                Submit Your App\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"flex flex-col lg:flex-row gap-8\">\n          <aside className=\"lg:w-64 flex-shrink-0\">\n            <div className=\"sticky top-4\">\n              <FilterPanel\n                selectedToolIds={selectedToolIds}\n                onToolIdsChange={setSelectedToolIds}\n                selectedCategoryId={selectedCategoryId}\n                onCategoryIdChange={setSelectedCategoryId}\n                sortBy={sortBy}\n                onSortChange={setSortBy}\n              />\n            </div>\n          </aside>\n\n          <main className=\"flex-1\">\n            {isLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {[...Array(6)].map((_, i) => (\n                  <div key={i} className=\"h-96 bg-card rounded-2xl animate-pulse\" data-testid={`skeleton-card-${i}`} />\n                ))}\n              </div>\n            ) : paginatedApps.length === 0 ? (\n              <div className=\"text-center py-16\">\n                <div className=\"w-24 h-24 mx-auto mb-6 rounded-full bg-muted flex items-center justify-center\">\n                  <Sparkles className=\"w-12 h-12 text-muted-foreground\" />\n                </div>\n                <h3 className=\"text-2xl font-display font-semibold mb-3\">No apps found</h3>\n                <p className=\"text-muted-foreground mb-6\">\n                  {searchQuery || selectedToolIds.length > 0 || selectedCategoryId\n                    ? \"Try adjusting your filters or search query\"\n                    : \"Be the first to submit an app!\"}\n                </p>\n                <Link href=\"/submit\">\n                  <Button data-testid=\"button-submit-first-app\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Submit the First App\n                  </Button>\n                </Link>\n              </div>\n            ) : (\n              <>\n                <div className=\"mb-6 text-sm text-muted-foreground\">\n                  Showing {paginatedApps.length} of {filteredApps.length} apps\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12\">\n                  {paginatedApps.map((app) => (\n                    <AppCard key={app.id} app={app} />\n                  ))}\n                </div>\n\n                {totalPages > 1 && (\n                  <div className=\"flex justify-center items-center gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setPage(p => Math.max(1, p - 1))}\n                      disabled={page === 1}\n                      data-testid=\"button-prev-page\"\n                    >\n                      Previous\n                    </Button>\n                    \n                    <div className=\"flex gap-2\">\n                      {[...Array(totalPages)].map((_, i) => (\n                        <Button\n                          key={i + 1}\n                          variant={page === i + 1 ? \"default\" : \"outline\"}\n                          onClick={() => setPage(i + 1)}\n                          className=\"min-w-10\"\n                          data-testid={`button-page-${i + 1}`}\n                        >\n                          {i + 1}\n                        </Button>\n                      ))}\n                    </div>\n\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setPage(p => Math.min(totalPages, p + 1))}\n                      disabled={page === totalPages}\n                      data-testid=\"button-next-page\"\n                    >\n                      Next\n                    </Button>\n                  </div>\n                )}\n              </>\n            )}\n          </main>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7086},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider } from \"firebase/auth\";\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n};\n\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport const googleProvider = new GoogleAuthProvider();\n","size_bytes":582},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/pages/AppDetailPage.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { Link } from \"wouter\";\nimport { AppListing } from \"@shared/schema\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { ExternalLink, ArrowLeft, Lightbulb, Calendar, User, Tag, Edit } from \"lucide-react\";\nimport { getToolColor } from \"../lib/utils\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { RatingDisplay } from \"@/components/RatingDisplay\";\nimport { ReviewsSection } from \"@/components/ReviewsSection\";\nimport { CommentsSection } from \"@/components/CommentsSection\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function AppDetailPage() {\n  const [, params] = useRoute(\"/app/:id\");\n  const [, setLocation] = useLocation();\n  const appId = params?.id;\n  const { user } = useAuth();\n\n  const { data: app, isLoading } = useQuery<AppListing>({\n    queryKey: [`/api/apps/${appId}`],\n    enabled: !!appId,\n  });\n\n  const isCreator = user?.id === app?.creatorId;\n\n  const launchMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", `/api/apps/${appId}/launch`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/apps/${appId}`] });\n    },\n  });\n\n  const handleLaunch = () => {\n    if (app) {\n      window.open(app.launchUrl, \"_blank\", \"noopener,noreferrer\");\n      launchMutation.mutate();\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <div className=\"h-96 bg-card animate-pulse\" />\n        <div className=\"max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"space-y-4\">\n            <div className=\"h-8 bg-card rounded animate-pulse w-3/4\" />\n            <div className=\"h-4 bg-card rounded animate-pulse w-1/2\" />\n            <div className=\"h-32 bg-card rounded animate-pulse\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!app) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-display font-semibold mb-4\">App not found</h2>\n          <Link href=\"/\">\n            <Button>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Home\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background pb-16\">\n      <div className=\"relative h-96 overflow-hidden\">\n        <img \n          src={app.previewImage} \n          alt={app.name}\n          className=\"w-full h-full object-cover\"\n          data-testid=\"img-detail-preview\"\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent\" />\n        \n        <div className=\"absolute top-6 left-6 right-6 flex items-center justify-between\">\n          <Link href=\"/\">\n            <Button \n              variant=\"outline\" \n              className=\"bg-white/10 backdrop-blur-md border-white/20 text-white hover:bg-white/20\"\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back\n            </Button>\n          </Link>\n          \n          <div className=\"flex items-center gap-4 text-sm text-white/90 font-medium\">\n            <button \n              onClick={() => document.getElementById('about-section')?.scrollIntoView({ behavior: 'smooth' })}\n              className=\"hover:text-white transition-colors\"\n              data-testid=\"link-about\"\n            >\n              About\n            </button>\n            <span className=\"text-white/40\">•</span>\n            <button \n              onClick={() => document.getElementById('reviews-section')?.scrollIntoView({ behavior: 'smooth' })}\n              className=\"hover:text-white transition-colors\"\n              data-testid=\"link-reviews\"\n            >\n              Reviews\n            </button>\n            <span className=\"text-white/40\">•</span>\n            <button \n              onClick={() => document.getElementById('comments-section')?.scrollIntoView({ behavior: 'smooth' })}\n              className=\"hover:text-white transition-colors\"\n              data-testid=\"link-comments\"\n            >\n              Comments\n            </button>\n          </div>\n        </div>\n\n        <div className=\"absolute bottom-0 left-0 right-0 p-6 max-w-5xl mx-auto\">\n          <Card className=\"p-6 bg-background/95 backdrop-blur-md border\">\n            <div className=\"flex items-start justify-between gap-6\">\n              <div className=\"flex-1 space-y-4\">\n                <h1 className=\"text-3xl md:text-4xl font-display font-bold\" data-testid=\"text-app-name\">\n                  {app.name}\n                </h1>\n                \n                <div className=\"flex flex-wrap gap-2\">\n                  {app.vibecodingTools && app.vibecodingTools.map((tool: string) => (\n                    <Badge \n                      key={tool}\n                      className={getToolColor(tool)}\n                      data-testid={`badge-tool-${tool.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      {tool}\n                    </Badge>\n                  ))}\n                  <Badge variant=\"outline\" data-testid=\"badge-category\">\n                    {app.category}\n                  </Badge>\n                </div>\n              </div>\n              \n              <div className=\"flex flex-col gap-3.5 w-[240px]\">\n                <RatingDisplay \n                  appId={app.id} \n                  appName=\"\"\n                  creatorId={app.creatorId}\n                />\n                \n                <div className=\"flex flex-col gap-2\">\n                  <Button \n                    size=\"lg\"\n                    onClick={handleLaunch}\n                    className=\"bg-chart-2 hover:bg-chart-2/90 text-white font-semibold shadow-lg w-full\"\n                    data-testid=\"button-launch-app\"\n                  >\n                    Launch App\n                    <ExternalLink className=\"w-5 h-5 ml-2\" />\n                  </Button>\n                  \n                  {isCreator && (\n                    <Button \n                      size=\"lg\"\n                      variant=\"outline\"\n                      onClick={() => setLocation(`/app/${app.id}/edit`)}\n                      className=\"w-full\"\n                      data-testid=\"button-edit-app\"\n                    >\n                      <Edit className=\"w-4 h-4 mr-2\" />\n                      Edit App\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      </div>\n\n      <div className=\"max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 mt-12\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"lg:col-span-2 space-y-8\">\n            <section id=\"about-section\">\n              <h2 className=\"text-2xl font-display font-semibold mb-4\">About this app</h2>\n              <div className=\"prose prose-slate max-w-none\" data-testid=\"text-full-description\">\n                <ReactMarkdown remarkPlugins={[remarkGfm]}>\n                  {app.fullDescription}\n                </ReactMarkdown>\n              </div>\n            </section>\n\n            {app.keyLearnings && (\n              <section>\n                <Card className=\"border-l-4 border-l-primary bg-accent/30 p-6\">\n                  <div className=\"flex items-start gap-3 mb-4\">\n                    <Lightbulb className=\"w-6 h-6 text-primary flex-shrink-0 mt-1\" />\n                    <h2 className=\"text-2xl font-display font-semibold\">Key Learnings</h2>\n                  </div>\n                  <div className=\"prose prose-slate max-w-none\" data-testid=\"text-key-learnings\">\n                    <ReactMarkdown remarkPlugins={[remarkGfm]}>\n                      {app.keyLearnings}\n                    </ReactMarkdown>\n                  </div>\n                </Card>\n              </section>\n            )}\n          </div>\n\n          <aside className=\"space-y-6\">\n            <Card className=\"p-6\">\n              <h3 className=\"font-display font-semibold mb-4\">Info</h3>\n              <div className=\"space-y-3 text-sm\">\n                <div className=\"flex items-center gap-2\">\n                  <User className=\"w-4 h-4 text-muted-foreground\" />\n                  <span className=\"text-muted-foreground\">Creator</span>\n                  <span className=\"ml-auto font-medium\" data-testid=\"text-creator-name\">{app.creatorName}</span>\n                </div>\n                {app.creatorContact && !app.creatorContact.includes(\"@\") && (\n                  <div className=\"flex items-center gap-2\">\n                    <ExternalLink className=\"w-4 h-4 text-muted-foreground\" />\n                    <span className=\"text-muted-foreground\">Website</span>\n                    <a \n                      href={app.creatorContact.startsWith(\"http\") ? app.creatorContact : `https://${app.creatorContact}`} \n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                      className=\"ml-auto hover:text-primary hover:underline\"\n                      data-testid=\"text-creator-contact\"\n                    >\n                      Visit\n                    </a>\n                  </div>\n                )}\n                <div className=\"flex items-center gap-2\">\n                  <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n                  <span className=\"text-muted-foreground\">Created</span>\n                  <span className=\"ml-auto\" data-testid=\"text-created-date\">\n                    {new Date(app.createdDate).toLocaleDateString()}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <ExternalLink className=\"w-4 h-4 text-muted-foreground\" />\n                  <span className=\"text-muted-foreground\">Launches</span>\n                  <span className=\"ml-auto font-semibold\" data-testid=\"text-launch-count\">{app.launchCount}</span>\n                </div>\n                {app.tags && app.tags.length > 0 && (\n                  <div className=\"pt-2 mt-2 border-t\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Tag className=\"w-4 h-4 text-muted-foreground\" />\n                      <span className=\"text-muted-foreground\">Tags</span>\n                    </div>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {app.tags.map((tag: string) => (\n                        <Badge key={tag} variant=\"secondary\" className=\"text-xs\" data-testid={`badge-tag-${tag}`}>\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </Card>\n          </aside>\n        </div>\n\n        {/* Reviews Section */}\n        <div id=\"reviews-section\" className=\"mt-12\">\n          <ReviewsSection appId={app.id} creatorId={app.creatorId} />\n        </div>\n\n        {/* Comments Section */}\n        <div id=\"comments-section\" className=\"mt-8\">\n          <CommentsSection appId={app.id} />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11464},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"server/routes.ts":{"content":"// Referenced from javascript_object_storage blueprint (public file uploading)\nimport type { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertAppSchema, \n  insertReviewSchema, \n  insertCommentSchema, \n  insertToolSuggestionSchema,\n  type Category,\n  type Tool,\n  type Tag,\n  type App,\n  type User,\n  type AppListing,\n} from \"@shared/schema\";\nimport { ObjectStorageService, ObjectNotFoundError } from \"./objectStorage\";\nimport { isAuthenticated } from \"./googleAuth\";\nimport passport from \"./googleAuth\";\n\n// Helper function to transform App to AppListing format for frontend compatibility\nasync function transformAppToListing(app: App, includeRelated: boolean = true): Promise<AppListing> {\n  let tools: Tool[] = [];\n  let tags: Tag[] = [];\n  let category: Category | undefined = undefined;\n  let creator: User | undefined = undefined;\n\n  if (includeRelated) {\n    [tools, tags, category, creator] = await Promise.all([\n      storage.getToolsForApp(app.id),\n      storage.getTagsForApp(app.id),\n      app.categoryId ? storage.getCategoryById(app.categoryId) : Promise.resolve(undefined),\n      app.creatorId ? storage.getUserById(app.creatorId) : Promise.resolve(undefined),\n    ]);\n  }\n\n  return {\n    id: app.id,\n    name: app.name,\n    shortDescription: app.shortDescription,\n    fullDescription: app.fullDescription,\n    launchUrl: app.launchUrl,\n    vibecodingTools: tools.map(t => t.name),\n    category: category?.name || \"Other\",\n    creatorName: creator?.name || \"Unknown Creator\",\n    creatorContact: creator?.email || null,\n    previewImage: app.screenshotUrl,\n    screenshotUrl: app.screenshotUrl,\n    tags: tags.map(t => t.name),\n    keyLearnings: app.keyLearnings,\n    launchCount: app.viewCount,\n    createdDate: app.createdAt,\n    submissionDate: app.createdAt,\n    status: app.status,\n    creatorId: app.creatorId || null,\n    categoryId: app.categoryId || null,\n  };\n}\n\n// Admin authorization middleware\nfunction isAdmin(req: Request, res: Response, next: NextFunction) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: \"Unauthorized\" });\n  }\n  \n  const user = req.user as any;\n  if (user?.role !== 'admin') {\n    return res.status(403).json({ error: \"Forbidden: Admin access required\" });\n  }\n  \n  next();\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n\n  const objectStorageService = new ObjectStorageService();\n\n  // ============================================================================\n  // GOOGLE OAUTH ROUTES\n  // ============================================================================\n\n  app.get('/api/login', passport.authenticate('google', { scope: ['profile', 'email'] }));\n\n  app.get('/api/callback',\n    passport.authenticate('google', { \n      failureRedirect: '/',\n      successRedirect: '/'\n    })\n  );\n\n  app.post('/api/logout', (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        return res.status(500).json({ error: 'Logout failed' });\n      }\n      res.json({ success: true });\n    });\n  });\n\n  // Auth route - returns current user from session\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = req.user;\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // ============================================================================\n  // APP ROUTES\n  // ============================================================================\n\n  // Get all apps with optional filters\n  app.get(\"/api/apps\", async (req, res) => {\n    try {\n      const { search, tools, category, sortBy, status } = req.query;\n      const user = req.user as any;\n      \n      const filters = {\n        search: search as string | undefined,\n        toolIds: tools ? (Array.isArray(tools) ? tools : [tools]) as string[] : undefined,\n        categoryId: category as string | undefined,\n        status: status as \"draft\" | \"published\" | undefined,\n        sortBy: (sortBy as \"newest\" | \"oldest\" | \"popular\" | \"rating\") || \"newest\",\n        userId: user?.id, // Pass userId to show user's drafts\n      };\n\n      const apps = await storage.getAllApps(filters);\n      const appListings = await Promise.all(apps.map(app => transformAppToListing(app)));\n      res.json(appListings);\n    } catch (error) {\n      console.error(\"Error fetching apps:\", error);\n      res.status(500).json({ error: \"Failed to fetch apps\" });\n    }\n  });\n\n  // Get single app by ID with tools and tags\n  app.get(\"/api/apps/:id\", async (req, res) => {\n    try {\n      const user = req.user as any;\n      const app = await storage.getApp(req.params.id, user?.id);\n      \n      if (!app) {\n        return res.status(404).json({ error: \"App not found\" });\n      }\n\n      const appListing = await transformAppToListing(app);\n      res.json(appListing);\n    } catch (error) {\n      console.error(\"Error fetching app:\", error);\n      res.status(500).json({ error: \"Failed to fetch app\" });\n    }\n  });\n\n  // Create new app (protected - requires authentication)\n  app.post(\"/api/apps\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      \n      // Extract tools and tags from request body\n      const { toolIds, tagNames, ...appData } = req.body;\n      \n      // Validate app data with default status='draft'\n      const validatedData = insertAppSchema.parse({\n        ...appData,\n        creatorId: userId,\n        status: appData.status || 'draft'\n      });\n      \n      const app = await storage.createApp(validatedData);\n\n      // Add tools to app\n      if (toolIds && Array.isArray(toolIds)) {\n        for (const toolId of toolIds) {\n          await storage.addToolToApp(app.id, toolId);\n        }\n      }\n\n      // Add tags to app (create if they don't exist)\n      if (tagNames && Array.isArray(tagNames)) {\n        for (const tagName of tagNames) {\n          const tag = await storage.getOrCreateTag(tagName);\n          await storage.addTagToApp(app.id, tag.id);\n        }\n      }\n\n      res.status(201).json(app);\n    } catch (error: any) {\n      console.error(\"Error creating app:\", error);\n      if (error.name === \"ZodError\") {\n        return res.status(400).json({ error: \"Validation failed\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create app\" });\n    }\n  });\n\n  // Update app (protected - creator only)\n  app.patch(\"/api/apps/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const appId = req.params.id;\n      \n      // Get existing app\n      const existingApp = await storage.getApp(appId, userId);\n      \n      if (!existingApp) {\n        return res.status(404).json({ error: \"App not found\" });\n      }\n      \n      // Check if user is creator\n      if (existingApp.creatorId !== userId) {\n        return res.status(403).json({ error: \"Forbidden: You don't have permission to update this app\" });\n      }\n      \n      // Extract tools and tags from request body\n      const { toolIds, tagNames, ...appData } = req.body;\n      \n      // Validate app data (exclude creatorId and status from update)\n      const { creatorId, status, ...dataToUpdate } = appData;\n      \n      // Update app\n      const updatedApp = await storage.updateApp(appId, dataToUpdate);\n      \n      // Update tools if provided\n      if (toolIds !== undefined && Array.isArray(toolIds)) {\n        // Get current tools\n        const currentTools = await storage.getToolsForApp(appId);\n        const currentToolIds = currentTools.map(t => t.id);\n        \n        // Remove tools that are not in the new list\n        for (const toolId of currentToolIds) {\n          if (!toolIds.includes(toolId)) {\n            await storage.removeToolFromApp(appId, toolId);\n          }\n        }\n        \n        // Add new tools\n        for (const toolId of toolIds) {\n          if (!currentToolIds.includes(toolId)) {\n            await storage.addToolToApp(appId, toolId);\n          }\n        }\n      }\n      \n      // Update tags if provided\n      if (tagNames !== undefined && Array.isArray(tagNames)) {\n        // Get current tags\n        const currentTags = await storage.getTagsForApp(appId);\n        const currentTagNames = currentTags.map(t => t.name);\n        \n        // Remove tags that are not in the new list\n        for (const tag of currentTags) {\n          if (!tagNames.includes(tag.name)) {\n            await storage.removeTagFromApp(appId, tag.id);\n          }\n        }\n        \n        // Add new tags\n        for (const tagName of tagNames) {\n          if (!currentTagNames.includes(tagName)) {\n            const tag = await storage.getOrCreateTag(tagName);\n            await storage.addTagToApp(appId, tag.id);\n          }\n        }\n      }\n      \n      const appListing = await transformAppToListing(updatedApp);\n      res.json(appListing);\n    } catch (error: any) {\n      console.error(\"Error updating app:\", error);\n      if (error.name === \"ZodError\") {\n        return res.status(400).json({ error: \"Validation failed\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update app\" });\n    }\n  });\n\n  // Increment view count (was launch count)\n  app.post(\"/api/apps/:id/launch\", async (req, res) => {\n    try {\n      await storage.incrementViewCount(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error incrementing view count:\", error);\n      res.status(500).json({ error: \"Failed to increment view count\" });\n    }\n  });\n\n  // Update app status (creator or admin only)\n  app.patch(\"/api/apps/:id/status\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { status } = req.body;\n      const user = req.user;\n      const app = await storage.getApp(req.params.id, user.id);\n\n      if (!app) {\n        return res.status(404).json({ error: \"App not found\" });\n      }\n\n      // Check if user is creator or admin\n      if (app.creatorId !== user.id && user.role !== 'admin') {\n        return res.status(403).json({ error: \"Forbidden: You don't have permission to update this app\" });\n      }\n\n      if (status !== 'draft' && status !== 'published') {\n        return res.status(400).json({ error: \"Invalid status. Must be 'draft' or 'published'\" });\n      }\n\n      await storage.updateAppStatus(req.params.id, status);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating app status:\", error);\n      res.status(500).json({ error: \"Failed to update app status\" });\n    }\n  });\n\n  // ============================================================================\n  // REVIEW ROUTES\n  // ============================================================================\n  \n  // Get reviews for an app with user info\n  app.get(\"/api/apps/:id/reviews\", async (req, res) => {\n    try {\n      const reviews = await storage.getReviewsByApp(req.params.id);\n      res.json(reviews);\n    } catch (error) {\n      console.error(\"Error fetching reviews:\", error);\n      res.status(500).json({ error: \"Failed to fetch reviews\" });\n    }\n  });\n\n  // Get average rating for an app (from app table)\n  app.get(\"/api/apps/:id/rating\", async (req, res) => {\n    try {\n      const app = await storage.getApp(req.params.id);\n      if (!app) {\n        return res.status(404).json({ error: \"App not found\" });\n      }\n      res.json({ \n        averageRating: parseFloat(app.averageRating),\n        ratingCount: app.ratingCount\n      });\n    } catch (error) {\n      console.error(\"Error fetching rating:\", error);\n      res.status(500).json({ error: \"Failed to fetch rating\" });\n    }\n  });\n\n  // Create or update a review (protected - requires authentication)\n  app.post(\"/api/reviews\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      \n      // Get the app to check if user is the creator\n      const app = await storage.getApp(req.body.appId, userId);\n      if (!app) {\n        return res.status(404).json({ error: \"App not found\" });\n      }\n      \n      // Prevent creators from rating their own apps\n      if (app.creatorId === userId) {\n        return res.status(403).json({ error: \"You cannot rate your own app\" });\n      }\n      \n      // Check if user already reviewed this app\n      const existingReview = await storage.getUserReviewForApp(req.body.appId, userId);\n      \n      let review;\n      if (existingReview) {\n        // Update existing review\n        review = await storage.updateReview(\n          req.body.appId, \n          userId, \n          req.body.rating, \n          req.body.body\n        );\n        res.json(review);\n      } else {\n        // Create new review\n        const validatedData = insertReviewSchema.parse({\n          ...req.body,\n          userId,\n        });\n        \n        review = await storage.createReview(validatedData);\n        res.status(201).json(review);\n      }\n    } catch (error: any) {\n      console.error(\"Error creating/updating review:\", error);\n      if (error.name === \"ZodError\") {\n        return res.status(400).json({ error: \"Validation failed\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to save review\" });\n    }\n  });\n\n  // Delete a review (protected - requires authentication)\n  app.delete(\"/api/reviews/:appId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { appId } = req.params;\n      const deleteRating = req.query.deleteRating === 'true';\n      \n      // Check if user has a review for this app\n      const existingReview = await storage.getUserReviewForApp(appId, userId);\n      if (!existingReview) {\n        return res.status(404).json({ error: \"Review not found\" });\n      }\n      \n      await storage.deleteReview(appId, userId, deleteRating);\n      res.json({ success: true, message: \"Review deleted successfully\" });\n    } catch (error: any) {\n      console.error(\"Error deleting review:\", error);\n      res.status(500).json({ error: \"Failed to delete review\" });\n    }\n  });\n\n  // ============================================================================\n  // CATEGORY ROUTES\n  // ============================================================================\n\n  // Get all categories\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getAllCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ error: \"Failed to fetch categories\" });\n    }\n  });\n\n  // Create category (admin only)\n  app.post(\"/api/admin/categories\", isAdmin, async (req, res) => {\n    try {\n      const { name } = req.body;\n      \n      if (!name) {\n        return res.status(400).json({ error: \"Category name is required\" });\n      }\n\n      const category = await storage.createCategory({ name });\n      res.status(201).json(category);\n    } catch (error: any) {\n      console.error(\"Error creating category:\", error);\n      if (error.code === '23505') { // Unique constraint violation\n        return res.status(400).json({ error: \"Category already exists\" });\n      }\n      res.status(500).json({ error: \"Failed to create category\" });\n    }\n  });\n\n  // ============================================================================\n  // TOOL ROUTES\n  // ============================================================================\n\n  // Get all tools\n  app.get(\"/api/tools\", async (req, res) => {\n    try {\n      const tools = await storage.getAllTools();\n      res.json(tools);\n    } catch (error) {\n      console.error(\"Error fetching tools:\", error);\n      res.status(500).json({ error: \"Failed to fetch tools\" });\n    }\n  });\n\n  // Create/update tool (admin only)\n  app.post(\"/api/admin/tools\", isAdmin, async (req, res) => {\n    try {\n      const { name, websiteUrl, logoUrl } = req.body;\n      \n      if (!name) {\n        return res.status(400).json({ error: \"Tool name is required\" });\n      }\n\n      const tool = await storage.createTool({ name, websiteUrl, logoUrl });\n      res.status(201).json(tool);\n    } catch (error: any) {\n      console.error(\"Error creating tool:\", error);\n      if (error.code === '23505') { // Unique constraint violation\n        return res.status(400).json({ error: \"Tool already exists\" });\n      }\n      res.status(500).json({ error: \"Failed to create tool\" });\n    }\n  });\n\n  // ============================================================================\n  // TAG ROUTES\n  // ============================================================================\n\n  // Get all tags\n  app.get(\"/api/tags\", async (req, res) => {\n    try {\n      const tags = await storage.getAllTags();\n      res.json(tags);\n    } catch (error) {\n      console.error(\"Error fetching tags:\", error);\n      res.status(500).json({ error: \"Failed to fetch tags\" });\n    }\n  });\n\n  // ============================================================================\n  // COMMENT ROUTES\n  // ============================================================================\n\n  // Create comment (protected - requires authentication)\n  app.post(\"/api/comments\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      \n      const validatedData = insertCommentSchema.parse({\n        ...req.body,\n        userId,\n      });\n      \n      const comment = await storage.createComment(validatedData);\n      res.status(201).json(comment);\n    } catch (error: any) {\n      console.error(\"Error creating comment:\", error);\n      if (error.name === \"ZodError\") {\n        return res.status(400).json({ error: \"Validation failed\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create comment\" });\n    }\n  });\n\n  // Get comments for an app (top-level and replies)\n  app.get(\"/api/apps/:id/comments\", async (req, res) => {\n    try {\n      const { parentCommentId } = req.query;\n      const comments = await storage.getCommentsByApp(\n        req.params.id, \n        parentCommentId === 'null' ? null : (parentCommentId as string | undefined)\n      );\n      res.json(comments);\n    } catch (error) {\n      console.error(\"Error fetching comments:\", error);\n      res.status(500).json({ error: \"Failed to fetch comments\" });\n    }\n  });\n\n  // ============================================================================\n  // TOOL SUGGESTION ROUTES\n  // ============================================================================\n\n  // Create tool suggestion (protected - requires authentication)\n  app.post(\"/api/tool-suggestions\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      \n      const validatedData = insertToolSuggestionSchema.parse({\n        ...req.body,\n        userId,\n      });\n      \n      const suggestion = await storage.createToolSuggestion(validatedData);\n      res.status(201).json(suggestion);\n    } catch (error: any) {\n      console.error(\"Error creating tool suggestion:\", error);\n      if (error.name === \"ZodError\") {\n        return res.status(400).json({ error: \"Validation failed\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create tool suggestion\" });\n    }\n  });\n\n  // Get pending tool suggestions (admin only)\n  app.get(\"/api/admin/tool-suggestions\", isAdmin, async (req, res) => {\n    try {\n      const suggestions = await storage.getPendingToolSuggestions();\n      res.json(suggestions);\n    } catch (error) {\n      console.error(\"Error fetching tool suggestions:\", error);\n      res.status(500).json({ error: \"Failed to fetch tool suggestions\" });\n    }\n  });\n\n  // Approve tool suggestion (admin only)\n  app.post(\"/api/admin/tool-suggestions/:id/approve\", isAdmin, async (req, res) => {\n    try {\n      const { name, websiteUrl, logoUrl } = req.body;\n      \n      if (!name) {\n        return res.status(400).json({ error: \"Tool name is required\" });\n      }\n\n      const tool = await storage.approveToolSuggestion(req.params.id, {\n        name,\n        websiteUrl,\n        logoUrl\n      });\n      \n      res.json(tool);\n    } catch (error: any) {\n      console.error(\"Error approving tool suggestion:\", error);\n      if (error.message === \"Tool suggestion not found\") {\n        return res.status(404).json({ error: \"Tool suggestion not found\" });\n      }\n      res.status(500).json({ error: \"Failed to approve tool suggestion\" });\n    }\n  });\n\n  // Reject tool suggestion (admin only)\n  app.post(\"/api/admin/tool-suggestions/:id/reject\", isAdmin, async (req, res) => {\n    try {\n      await storage.rejectToolSuggestion(req.params.id);\n      res.json({ success: true });\n    } catch (error: any) {\n      console.error(\"Error rejecting tool suggestion:\", error);\n      if (error.message === \"Tool suggestion not found\") {\n        return res.status(404).json({ error: \"Tool suggestion not found\" });\n      }\n      res.status(500).json({ error: \"Failed to reject tool suggestion\" });\n    }\n  });\n\n  // ============================================================================\n  // OBJECT STORAGE ROUTES\n  // ============================================================================\n  \n  // Endpoint for serving uploaded objects (publicly accessible)\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error accessing object:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  // Endpoint to get upload URL for image\n  app.post(\"/api/objects/upload\", async (req, res) => {\n    try {\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  // Endpoint to normalize uploaded image path\n  app.put(\"/api/apps/image\", async (req, res) => {\n    try {\n      if (!req.body.imageURL) {\n        return res.status(400).json({ error: \"imageURL is required\" });\n      }\n\n      const objectPath = objectStorageService.normalizeObjectEntityPath(req.body.imageURL);\n      res.status(200).json({ objectPath });\n    } catch (error) {\n      console.error(\"Error normalizing image path:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":22706},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ReviewSection.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Star, User as UserIcon, Pencil, Trash2 } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { Review, User as UserType } from \"@shared/schema\";\n\ninterface ReviewWithUser extends Review {\n  user?: UserType;\n}\n\ninterface ReviewSectionProps {\n  appId: string;\n  creatorId?: string | null;\n}\n\nfunction StarRating({ rating, onRatingChange, readonly = false }: {\n  rating: number;\n  onRatingChange?: (rating: number) => void;\n  readonly?: boolean;\n}) {\n  const [hoveredStar, setHoveredStar] = useState<number | null>(null);\n  \n  const displayRating = !readonly && hoveredStar !== null ? hoveredStar : rating;\n  \n  return (\n    <div className=\"flex gap-1\" onMouseLeave={() => setHoveredStar(null)}>\n      {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((star) => (\n        <button\n          key={star}\n          type=\"button\"\n          onClick={() => !readonly && onRatingChange?.(star)}\n          onMouseEnter={() => !readonly && setHoveredStar(star)}\n          disabled={readonly}\n          className={`${readonly ? 'cursor-default' : 'cursor-pointer hover-elevate'} transition-transform active-elevate-2 rounded-sm`}\n          data-testid={`star-${star}`}\n        >\n          <Star\n            className={`h-4 w-4 transition-colors ${\n              star <= displayRating\n                ? \"fill-yellow-400 text-yellow-400\"\n                : \"text-muted-foreground\"\n            }`}\n          />\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport function ReviewSection({ appId, creatorId }: ReviewSectionProps) {\n  const { user, isAuthenticated, signInWithGoogle } = useAuth();\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [deleteRatingToo, setDeleteRatingToo] = useState(false);\n  const [rating, setRating] = useState(0);\n  const [reviewText, setReviewText] = useState(\"\");\n\n  const { data: reviews = [] } = useQuery<ReviewWithUser[]>({\n    queryKey: [\"/api/apps\", appId, \"reviews\"],\n  });\n\n  const { data: ratingData } = useQuery<{ averageRating: number | null }>({\n    queryKey: [\"/api/apps\", appId, \"rating\"],\n  });\n\n  const userReview = reviews.find((review) => review.userId === user?.id);\n  const isCreator = user?.id === creatorId;\n  const avgRating = ratingData?.averageRating;\n\n  // Populate form with existing review when editing\n  useEffect(() => {\n    if (userReview && isDialogOpen) {\n      setRating(userReview.rating);\n      setReviewText(userReview.body || \"\");\n    } else if (!userReview && isDialogOpen) {\n      setRating(0);\n      setReviewText(\"\");\n    }\n  }, [userReview, isDialogOpen]);\n\n  const submitReviewMutation = useMutation({\n    mutationFn: async () => {\n      if (rating < 1) {\n        throw new Error(\"Please select a rating (minimum 1 star)\");\n      }\n      const response = await apiRequest(\"POST\", \"/api/reviews\", {\n        appId,\n        rating,\n        body: reviewText.trim() || undefined,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: userReview ? \"Review Updated\" : \"Review Submitted\",\n        description: \"Thank you for your feedback!\",\n      });\n      setIsDialogOpen(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/apps\", appId, \"reviews\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/apps\", appId, \"rating\"] });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Please log in to submit a review.\",\n          variant: \"destructive\",\n        });\n        setIsDialogOpen(false);\n        setTimeout(() => {\n          signInWithGoogle();\n        }, 500);\n        return;\n      }\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Failed to submit review. Please try again.\",\n      });\n    },\n  });\n\n  const handleOpenDialog = () => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please log in to write a review.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        signInWithGoogle();\n      }, 500);\n      return;\n    }\n    setIsDialogOpen(true);\n  };\n\n  const deleteReviewMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"DELETE\", `/api/reviews/${appId}`, {\n        deleteRating: deleteRatingToo,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Review Deleted\",\n        description: deleteRatingToo ? \"Your review and rating have been removed.\" : \"Your review has been deleted, but your rating remains.\",\n      });\n      setIsDeleteDialogOpen(false);\n      setDeleteRatingToo(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/apps\", appId, \"reviews\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/apps\", appId, \"rating\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Failed to delete review. Please try again.\",\n      });\n    },\n  });\n\n  return (\n    <Card className=\"p-6\">\n      <h2 className=\"text-2xl font-heading font-bold mb-6\">Reviews & Ratings</h2>\n\n      {/* Average Rating */}\n      {avgRating !== null && avgRating !== undefined && reviews.length > 0 && (\n        <div className=\"mb-6 pb-6 border-b\">\n          <div className=\"flex items-center gap-3\">\n            <Star className=\"h-10 w-10 fill-yellow-400 text-yellow-400\" />\n            <div>\n              <div className=\"text-4xl font-bold\" data-testid=\"text-average-rating\">\n                {avgRating.toFixed(1)}<span className=\"text-lg text-muted-foreground\">/10</span>\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                {reviews.length} {reviews.length === 1 ? \"review\" : \"reviews\"}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Rate Button or User's Rating */}\n      {isAuthenticated ? (\n        isCreator ? (\n          <div className=\"mb-6 pb-6 border-b\">\n            <p className=\"text-sm text-muted-foreground\">\n              You cannot rate your own app.\n            </p>\n          </div>\n        ) : userReview ? (\n          <div className=\"mb-6 pb-6 border-b\">\n            <div className=\"flex items-center gap-3\">\n              <button\n                onClick={handleOpenDialog}\n                className=\"flex items-center gap-2 hover-elevate active-elevate-2 px-3 py-2 rounded-md transition-all\"\n                data-testid=\"button-edit-rating\"\n              >\n                <Star className=\"h-6 w-6 fill-yellow-400 text-yellow-400\" />\n                <span className=\"text-lg font-semibold\">{userReview.rating}/10</span>\n              </button>\n              {userReview.body && (\n                <div className=\"flex gap-2\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={handleOpenDialog}\n                    data-testid=\"button-edit-review\"\n                  >\n                    <Pencil className=\"h-4 w-4 mr-1\" />\n                    Edit\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => setIsDeleteDialogOpen(true)}\n                    data-testid=\"button-delete-review\"\n                  >\n                    <Trash2 className=\"h-4 w-4 mr-1\" />\n                    Delete\n                  </Button>\n                </div>\n              )}\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-2\">\n              {userReview.body ? \"Manage your review\" : \"Click to edit your rating\"}\n            </p>\n          </div>\n        ) : (\n          <div className=\"mb-6 pb-6 border-b\">\n            <button\n              onClick={handleOpenDialog}\n              className=\"flex items-center gap-2 text-primary hover-elevate active-elevate-2 px-3 py-2 rounded-md transition-all\"\n              data-testid=\"button-rate\"\n            >\n              <Star className=\"h-5 w-5\" />\n              <span className=\"font-medium\">Rate</span>\n            </button>\n          </div>\n        )\n      ) : (\n        <div className=\"mb-6 pb-6 border-b\">\n          <p className=\"text-sm text-muted-foreground mb-3\">\n            Please log in to write a review.\n          </p>\n          <Button size=\"sm\" data-testid=\"button-login-to-review\" onClick={signInWithGoogle}>\n            Log In to Review\n          </Button>\n        </div>\n      )}\n\n      {/* Rating Dialog */}\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogContent className=\"sm:max-w-[500px]\" data-testid=\"dialog-rate\">\n          <DialogHeader>\n            <DialogTitle>{userReview ? \"Edit Your Review\" : \"Write a Review\"}</DialogTitle>\n            <DialogDescription>\n              Share your experience with this app\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Your Rating *</label>\n              <StarRating rating={rating} onRatingChange={setRating} />\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                {rating === 0 ? \"Click a star to rate\" : `${rating}/10 stars`}\n              </p>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Your Review (Optional)</label>\n              <Textarea\n                placeholder=\"Share your thoughts about this app...\"\n                value={reviewText}\n                onChange={(e) => setReviewText(e.target.value)}\n                maxLength={1000}\n                rows={4}\n                data-testid=\"textarea-review\"\n              />\n              <div className=\"text-xs text-muted-foreground mt-1\">\n                {reviewText.length}/1000 characters\n              </div>\n            </div>\n            <div className=\"flex gap-2 justify-end\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsDialogOpen(false)}\n                data-testid=\"button-cancel-review\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={() => submitReviewMutation.mutate()}\n                disabled={submitReviewMutation.isPending}\n                data-testid=\"button-submit-review\"\n              >\n                {submitReviewMutation.isPending ? \"Submitting...\" : userReview ? \"Update Review\" : \"Submit Review\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n        <AlertDialogContent data-testid=\"dialog-delete-review\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Review</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete your review? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <div className=\"flex items-center space-x-2 my-4\">\n            <Checkbox\n              id=\"delete-rating\"\n              checked={deleteRatingToo}\n              onCheckedChange={(checked) => setDeleteRatingToo(checked === true)}\n              data-testid=\"checkbox-delete-rating\"\n            />\n            <label\n              htmlFor=\"delete-rating\"\n              className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n            >\n              Also delete my rating\n            </label>\n          </div>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deleteReviewMutation.mutate()}\n              disabled={deleteReviewMutation.isPending}\n              data-testid=\"button-confirm-delete\"\n            >\n              {deleteReviewMutation.isPending ? \"Deleting...\" : \"Delete\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Reviews List */}\n      <div className=\"space-y-4\">\n        {reviews.filter(review => review.body).length === 0 ? (\n          <p className=\"text-muted-foreground text-center py-8\">\n            No reviews yet. Be the first to review this app!\n          </p>\n        ) : (\n          reviews.filter(review => review.body).map((review) => (\n            <div key={review.id} className=\"border-b last:border-0 pb-4 last:pb-0\" data-testid={`review-${review.id}`}>\n              <div className=\"flex items-start gap-3\">\n                <Avatar className=\"h-10 w-10\">\n                  <AvatarImage src={review.user?.profilePictureUrl || undefined} />\n                  <AvatarFallback>\n                    <UserIcon className=\"h-5 w-5\" />\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <div>\n                      <p className=\"font-medium\" data-testid={`review-author-${review.id}`}>\n                        {review.user?.name?.split(\" \")[0] || review.user?.email || \"Anonymous\"}\n                      </p>\n                      <div className=\"flex items-center gap-2 mt-1\">\n                        <div className=\"flex items-center gap-1\">\n                          <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                          <span className=\"text-sm font-medium\">{review.rating}/10</span>\n                        </div>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {review.createdAt && formatDistanceToNow(new Date(review.createdAt), { addSuffix: true })}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  {review.body && (\n                    <p className=\"text-sm text-secondary-foreground mt-2\" data-testid={`review-text-${review.id}`}>\n                      {review.body}\n                    </p>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":15402},"server/objectStorage.ts":{"content":"// Referenced from javascript_object_storage blueprint\nimport { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\nexport class ObjectStorageService {\n  constructor() {}\n\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n    return null;\n  }\n\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      const [metadata] = await file.getMetadata();\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      const stream = file.createReadStream();\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(rawPath: string): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}\n","size_bytes":7470},"replit.md":{"content":"# Vibecoded Apps Marketplace\n\n## Overview\n\nThe Vibecoded Apps Marketplace is a platform for discovering and sharing applications built with AI-powered coding tools (vibecoding). Users can browse apps created with tools like Replit Agent, Bolt.new, v0, Cursor, Claude, ChatGPT, Lovable, and Windsurf. Creators can submit their AI-built applications with detailed information including screenshots, descriptions, key learnings, and the tools used to build them. The platform features a modern, vibrant design inspired by Product Hunt, Dribbble, and the App Store, with comprehensive filtering, search, and review capabilities.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes (October 16, 2025)\n\n**Latest Updates - App Edit Functionality:**\n- ✅ **Creators can now edit their apps** - App creators can update all app details after submission\n- ✅ **Edit button on app detail page** - \"Edit App\" button appears only for the app creator\n- ✅ **EditAppPage with pre-populated data** - Edit form automatically loads existing app data\n- ✅ **Full field editing** - Update name, descriptions, URL, tools, category, tags, screenshot, and key learnings\n- ✅ **Backend PATCH endpoint** - PATCH /api/apps/:id for updating apps (creator-only access)\n- ✅ **Tools and tags management** - Automatically sync tool/tag relationships when editing\n- ✅ **Permission checks** - Only creators can edit their own apps (enforced on both frontend and backend)\n\n**Previous Updates - Complete IMDb-Style Rating & Review System:**\n- ✅ **Header layout** - App title on left, rating info on right (APP RATING + YOUR RATING sections)\n- ✅ **APP RATING display** - Shows ★ X.X/10 with \"APP RATING\" label above and rater count below (e.g., \"523 ratings\")\n- ✅ **YOUR RATING display** - Shows \"YOUR RATING\" label above, blue ★ X/10 when rated, empty star + \"Rate\" text when not rated\n- ✅ **Auto-submit rating modal** - Click any star to instantly submit rating (no submit button needed)\n- ✅ **Modal buttons** - \"Cancel\" always visible, \"Remove Rating\" only shown when user has existing rating\n- ✅ **Top navigation links** - \"About • Reviews • Comments\" in header top-right with smooth scroll to sections\n- ✅ **Separated components** - Rating (RatingDisplay.tsx) and reviews (ReviewsSection.tsx) are independent\n- ✅ **Independent edit/delete** - Reviews have their own edit/delete buttons, rating has remove button in modal\n\n**Previous Updates - IMDb-Style Rating System:**\n- ✅ **Star rating hover effects** - Stars fill on hover up to hovered star, click to select rating\n- ✅ **Rating default changed to 0** - Modal starts with all stars empty, minimum rating of 1 required\n- ✅ **IMDb-style rating display** - User's rating shown as ★ 7/10 (single filled star + number)\n- ✅ **Reviews list filtering** - Only reviews with text are displayed; ratings-only hidden but counted in average\n- ✅ **Single star display in reviews** - Reviews show ★ 9/10 format instead of 10 stars\n- ✅ **Edit and Delete functionality** - Edit/Delete buttons appear when user has written review (not just rating)\n- ✅ **Delete confirmation dialog** - Checkbox option to delete rating along with review, or keep rating\n- ✅ **Backend DELETE endpoint** - DELETE /api/reviews/:appId with optional rating deletion\n\n**Previous Updates - Rating Modal & Edit Feature:**\n- ✅ **Rating now uses modal dialog** - Clean popup interface instead of inline form\n- ✅ **Users can edit their reviews** - Click on filled star to open modal with existing rating/review pre-populated\n- ✅ User's rating displayed as filled star + number (e.g., ⭐ 8) with \"Click to edit\" hint\n- ✅ Backend supports both create and update operations on same endpoint (POST /api/reviews)\n- ✅ Modal shows 10-star rating interface with current rating pre-selected for editing\n- ✅ Review text auto-populated when editing existing review\n\n**Previous Updates - App Visibility & Rating UI:**\n- ✅ **FIXED: App visibility issue** - New apps now immediately visible to all users (changed default status from \"draft\" to \"published\")\n- ✅ Updated existing draft apps to published status in database\n- ✅ Form validation errors display on submit page with user-friendly field names\n- ✅ Backend check prevents creators from rating their own apps (403 error)\n- ✅ Frontend hides rating form if user is the app creator\n- ✅ Fixed field name mismatches (profilePictureUrl, name, body fields)\n\n**Clean Database Migration Completed:**\n- ✅ Dropped all old tables and recreated database with clean normalized schema (12 tables)\n- ✅ Implemented proper many-to-many relationships (app_tools, app_tags join tables)\n- ✅ Added foreign key relationships (apps → categories, apps → users)\n- ✅ Created transformation layer to convert normalized data to frontend-compatible format\n- ✅ Added 3 dummy apps with realistic data and proper relationships\n- ✅ All tests passing - homepage, app details, reviews, and comments working correctly\n\n**10-Star Ratings & Comments System:**\n- Upgraded rating system from 5 stars to 10 stars for more granular feedback\n- Implemented comments section with nested replies support (one level deep)\n- ReviewSection component with 10-star submission and collapsible UI\n- CommentsSection component with real-time posting and reply functionality\n- Self-rating prevention at both backend and frontend levels\n\n**Migration from Firebase to Direct Google OAuth:**\n- Removed Firebase dependency completely - now using direct Google OAuth with Passport.js\n- Simplified authentication to use only Google Cloud Console credentials (no Firebase project needed)\n- Implemented session-based authentication with PostgreSQL session storage\n- Users log in with Google OAuth redirect flow (standard OAuth, not popup)\n- All authentication state managed server-side via sessions\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Build System:**\n- React 18+ with TypeScript for type safety\n- Vite as the build tool and development server with HMR support\n- Wouter for lightweight client-side routing (routes: `/`, `/submit`, `/app/:id`)\n- TanStack Query (React Query) for server state management with infinite stale time\n\n**UI Component System:**\n- shadcn/ui (New York style) with Radix UI primitives for accessible components\n- Tailwind CSS for styling with custom design system\n- Custom color palette with light/dark mode support (primary: vibrant purple, tool-specific badge colors)\n- Typography: Inter (UI/body), Plus Jakarta Sans (headlines), JetBrains Mono (code/tags)\n- Component library includes forms, dialogs, cards, badges, avatars, toasts, and more\n\n**State Management:**\n- React Query for API data caching and synchronization\n- React Hook Form with Zod validation for form state\n- Local component state for UI interactions (filters, search, pagination)\n- Session-based authentication checked via `/api/auth/user` endpoint\n\n### Backend Architecture\n\n**Server Framework:**\n- Express.js as the HTTP server\n- TypeScript with ES modules for type-safe backend code\n- Session-based authentication with express-session and PostgreSQL storage\n\n**API Design:**\n- RESTful API endpoints under `/api` prefix\n- Authentication routes: `/api/login` (Google OAuth), `/api/callback` (OAuth callback), `/api/logout` (destroy session)\n- Auth status: `/api/auth/user` (returns current user from session)\n- App routes: `/api/apps` (list with filters), `/api/apps/:id` (details), `/api/apps/:id/launch` (increment counter)\n- Review routes: `/api/apps/:id/reviews` (create/list), `/api/apps/:id/rating` (average rating), `/api/reviews` (create)\n- Object storage routes: `/objects/:objectPath`, `/api/objects/upload`, `/api/apps/image`\n\n**Authentication & Authorization:**\n- Google OAuth 2.0 via Passport.js with passport-google-oauth20 strategy\n- Session management with express-session and connect-pg-simple\n- Sessions stored in PostgreSQL `sessions` table (auto-created)\n- `isAuthenticated` middleware in `server/googleAuth.ts` checks `req.isAuthenticated()`\n- User data extracted from Google profile and upserted to database\n- Page-level and API-level auth guards\n- Unauthenticated requests return 401, handled by frontend to redirect to `/api/login`\n\n### Data Storage Solutions\n\n**Database:**\n- PostgreSQL via Neon serverless driver with WebSocket support\n- Drizzle ORM for type-safe database queries and schema management\n- Schema migrations managed through `drizzle-kit push`\n\n**Database Schema:**\n- `app_listings`: Core app data (name, descriptions, URLs, tools, category, creator info, preview image, tags, learnings, launch count, timestamps, status)\n- `users`: User profiles from Google OAuth (id = Google profile ID, email, name, profilePictureUrl, bio, social links, role, createdAt, updatedAt)\n- `reviews`: User reviews with ratings (app_id, user_id, rating 1-10, reviewText, createdAt) with unique constraint on (appId, userId) - 10-star rating system\n- `comments`: User comments with nested replies (app_id, user_id, content, parent_comment_id for replies, createdAt) - supports one level of nesting\n- `sessions`: Session storage table (auto-created by connect-pg-simple)\n\n**File Storage:**\n- Google Cloud Storage for image uploads\n- Object storage accessed via Replit sidecar with external account credentials\n- ACL policy system for public/private file access control\n- Uppy dashboard for client-side file uploads with AWS S3-compatible interface\n- Preview images limited to 5MB, image/* mime types only\n\n**Data Access Patterns:**\n- Repository pattern through `IStorage` interface implemented by `DatabaseStorage`\n- Filtering by search term (ilike across name, description, creator, tags), tools (array contains), category\n- Sorting by newest, oldest, or popular (launch count)\n- Average rating calculation via SQL aggregation\n- Launch count increment with optimistic UI updates\n- User upsert on authentication (Google profile ID as primary key)\n\n### External Dependencies\n\n**Third-Party Services:**\n- Google OAuth 2.0: Direct authentication (no Firebase needed)\n- Google Cloud Storage: Image hosting and delivery\n- Neon PostgreSQL: Serverless database hosting\n\n**Key Libraries:**\n- @neondatabase/serverless: PostgreSQL database client\n- @google-cloud/storage: GCS SDK for file operations\n- drizzle-orm: Type-safe SQL query builder\n- passport: Authentication middleware framework\n- passport-google-oauth20: Google OAuth 2.0 strategy for Passport\n- express-session: Session management middleware\n- connect-pg-simple: PostgreSQL session store for express-session\n- @uppy/core, @uppy/aws-s3, @uppy/dashboard: File upload UI and logic\n- react-hook-form + @hookform/resolvers + zod: Form validation\n- react-markdown + remark-gfm: Markdown rendering for descriptions\n- date-fns: Date formatting utilities\n\n**Development Tools:**\n- @replit/vite-plugin-runtime-error-modal: Enhanced error overlay\n- @replit/vite-plugin-cartographer: Development tooling\n- tsx: TypeScript execution for development\n- esbuild: Production build bundling\n\n### Authentication Flow\n\n**Client-Side:**\n1. User clicks \"Login with Google\" → redirects to `/api/login`\n2. `/api/login` initiates Google OAuth flow (Passport.js)\n3. User authenticates with Google on Google's OAuth page\n4. Google redirects back to `/api/callback` with authorization code\n5. Passport exchanges code for user profile data\n6. User data upserted to PostgreSQL, session created\n7. User redirected to home page (`/`) with session cookie\n\n**Backend:**\n1. `/api/login` route uses `passport.authenticate('google')` to start OAuth\n2. `/api/callback` route uses `passport.authenticate('google')` to complete OAuth\n3. Passport strategy extracts user data from Google profile\n4. User upserted to database (Google profile ID as primary key)\n5. `passport.serializeUser` stores user ID in session\n6. `passport.deserializeUser` fetches user from database on subsequent requests\n7. Protected routes check `req.isAuthenticated()` via `isAuthenticated` middleware\n\n**Session Management:**\n1. Sessions stored in PostgreSQL `sessions` table via connect-pg-simple\n2. Session cookie (httpOnly, secure in production, sameSite: lax)\n3. 30-day session expiration\n4. All API requests include session cookie via `credentials: 'include'`\n\n**Logout:**\n1. User clicks \"Logout\" → POST to `/api/logout`\n2. `req.logout()` destroys session\n3. Session removed from database\n4. User redirected to home page\n\n### Google OAuth Configuration\n\n**Required Setup:**\n1. Google Cloud Console project with OAuth 2.0 credentials\n2. Authorized redirect URI must include: `https://YOUR-REPLIT-URL/api/callback`\n3. Environment variables:\n   - `GOOGLE_CLIENT_ID`: OAuth 2.0 Client ID\n   - `GOOGLE_CLIENT_SECRET`: OAuth 2.0 Client Secret\n   - `SESSION_SECRET`: Secret for signing session cookies (optional, auto-generated if not set)\n\n**Current Callback URL:**\n- `https://316b5bd2-9f58-4298-8c70-82bb67a42bfa-00-1ygsbduvpp84b.spock.replit.dev/api/callback`\n- This must be added to Google Cloud Console → Credentials → OAuth 2.0 Client → Authorized redirect URIs\n","size_bytes":13097},"client/src/components/ObjectUploader.tsx":{"content":"// Referenced from javascript_object_storage blueprint\nimport { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 5242880, // 5MB default for marketplace preview images\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n        allowedFileTypes: [\"image/*\"],\n      },\n      autoProceed: true,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n        setShowModal(false);\n      })\n  );\n\n  return (\n    <div>\n      <Button \n        type=\"button\" \n        onClick={() => setShowModal(true)} \n        className={buttonClassName}\n        data-testid=\"button-upload-image\"\n      >\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}\n","size_bytes":1778},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/SearchBar.tsx":{"content":"import { Input } from \"@/components/ui/input\";\nimport { Search } from \"lucide-react\";\n\ninterface SearchBarProps {\n  value: string;\n  onChange: (value: string) => void;\n}\n\nexport function SearchBar({ value, onChange }: SearchBarProps) {\n  return (\n    <div className=\"relative\">\n      <Search className=\"absolute left-4 top-1/2 -translate-y-1/2 w-5 h-5 text-white/60\" />\n      <Input\n        type=\"search\"\n        placeholder=\"Search by app name, creator, or tags...\"\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n        className=\"pl-12 pr-4 h-14 text-base bg-white/10 backdrop-blur-md border-white/20 text-white placeholder:text-white/60 focus-visible:ring-white/40\"\n        data-testid=\"input-search\"\n      />\n    </div>\n  );\n}\n","size_bytes":758},"client/src/hooks/useAuth.ts":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport interface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  profileImageUrl: string | null;\n}\n\nexport function useAuth() {\n  const [isLoading, setIsLoading] = useState(true);\n  const queryClient = useQueryClient();\n\n  // Fetch current user from session\n  const { data: user, error } = useQuery<User>({\n    queryKey: ['/api/auth/user'],\n    retry: false,\n    staleTime: Infinity,\n  });\n\n  useEffect(() => {\n    if (user !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [user, error]);\n\n  const logout = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/logout', {\n        method: 'POST',\n        credentials: 'include',\n      });\n      if (!response.ok) throw new Error('Logout failed');\n      return response.json();\n    },\n    onSuccess: () => {\n      // Clear all queries and redirect\n      queryClient.clear();\n      window.location.href = '/';\n    },\n  });\n\n  const signInWithGoogle = () => {\n    window.location.href = '/api/login';\n  };\n\n  const signOut = () => {\n    logout.mutate();\n  };\n\n  return {\n    user: user || null,\n    isAuthenticated: !!user,\n    isLoading,\n    signInWithGoogle,\n    signOut,\n  };\n}\n","size_bytes":1379},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/hooks/storage.ts":{"content":"// Client-side storage helper for Firebase auth\nexport const storage = {\n  async upsertUser(user: any) {\n    // This will be handled by the backend when we make authenticated API calls\n    // For now, this is a no-op on the client side\n    return user;\n  }\n};\n","size_bytes":260},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"server/db.ts":{"content":"// Referenced from javascript_database blueprint\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":532},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/SubmitAppPage.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Link, useLocation } from \"wouter\";\nimport { insertAppSchema, type Category, type Tool } from \"@shared/schema\";\nimport type { InsertApp } from \"@shared/schema\";\nimport { ImageUpload } from \"../components/ImageUpload\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ArrowLeft, Upload, Check, AlertCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\n\nexport default function SubmitAppPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, signInWithGoogle, user } = useAuth();\n\n  // Redirect to login if not authenticated (page-level protection)\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please log in to submit an app.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        signInWithGoogle();\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast, signInWithGoogle]);\n  \n  const [tagNames, setTagNames] = useState<string[]>([]);\n  const [tagInput, setTagInput] = useState(\"\");\n  const [selectedToolIds, setSelectedToolIds] = useState<string[]>([]);\n  const [otherToolName, setOtherToolName] = useState(\"\");\n  const [isOtherToolSelected, setIsOtherToolSelected] = useState(false);\n  const [validationErrors, setValidationErrors] = useState<string[]>([]);\n\n  const { data: categories, isLoading: categoriesLoading } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const { data: tools, isLoading: toolsLoading } = useQuery<Tool[]>({\n    queryKey: [\"/api/tools\"],\n  });\n\n  const form = useForm<InsertApp>({\n    resolver: zodResolver(insertAppSchema),\n    defaultValues: {\n      name: \"\",\n      shortDescription: \"\",\n      fullDescription: \"\",\n      launchUrl: \"\",\n      screenshotUrl: \"\",\n      keyLearnings: \"\",\n      status: \"published\",\n      creatorId: \"\",\n      categoryId: \"\",\n    },\n  });\n\n  const submitMutation = useMutation({\n    mutationFn: async (data: InsertApp & { toolIds?: string[], tagNames?: string[], otherToolName?: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/apps\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Success!\",\n        description: \"Your app has been submitted successfully.\",\n      });\n      setLocation(`/app/${data.id}`);\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Failed to submit app. Please try again.\",\n      });\n    },\n  });\n\n\n  const addTag = () => {\n    if (tagInput.trim() && tagNames.length < 5 && !tagNames.includes(tagInput.trim())) {\n      setTagNames([...tagNames, tagInput.trim()]);\n      setTagInput(\"\");\n    }\n  };\n\n  const removeTag = (tagToRemove: string) => {\n    setTagNames(tagNames.filter(tag => tag !== tagToRemove));\n  };\n\n  const onSubmit = async (data: InsertApp) => {\n    if (!isAuthenticated || !user) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please log in to submit an app.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Clear validation errors on submit\n    setValidationErrors([]);\n\n    // Prepare submission data\n    const submissionData = {\n      ...data,\n      creatorId: user.id,\n      toolIds: selectedToolIds,\n      tagNames: tagNames,\n      otherToolName: isOtherToolSelected ? otherToolName : undefined,\n    };\n\n    submitMutation.mutate(submissionData);\n  };\n\n  // Field name mapping for user-friendly error messages\n  const fieldLabels: Record<string, string> = {\n    name: \"App Name\",\n    shortDescription: \"Short Description\",\n    fullDescription: \"Full Description\",\n    launchUrl: \"Launch URL\",\n    screenshotUrl: \"App Screenshot\",\n    categoryId: \"Category\",\n    keyLearnings: \"Key Learnings\",\n  };\n\n  // Show validation errors when form submission fails\n  const onInvalid = () => {\n    const errors = form.formState.errors;\n    const errorFields = Object.keys(errors).filter(field => field !== \"creatorId\");\n    \n    if (errorFields.length > 0) {\n      // Map field names to user-friendly labels\n      const friendlyErrorFields = errorFields.map(field => fieldLabels[field] || field);\n      setValidationErrors(friendlyErrorFields);\n      \n      // Scroll to first error\n      const firstErrorElement = document.querySelector(`[name=\"${errorFields[0]}\"]`);\n      if (firstErrorElement) {\n        firstErrorElement.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n      }\n    }\n  };\n\n  const toggleTool = (toolId: string) => {\n    if (selectedToolIds.includes(toolId)) {\n      setSelectedToolIds(selectedToolIds.filter(id => id !== toolId));\n    } else {\n      setSelectedToolIds([...selectedToolIds, toolId]);\n    }\n  };\n\n  const fullDescription = form.watch(\"fullDescription\");\n  const keyLearnings = form.watch(\"keyLearnings\");\n\n  return (\n    <div className=\"min-h-screen bg-background py-12\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"mb-4\" data-testid=\"button-back\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Home\n            </Button>\n          </Link>\n          <h1 className=\"text-4xl md:text-5xl font-display font-bold mb-3\">Submit Your App</h1>\n          <p className=\"text-lg text-muted-foreground\">\n            Share your AI-built creation with the community and inspire other builders.\n          </p>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit, onInvalid)} className=\"space-y-8\">\n            <Card className=\"p-6 space-y-6\">\n              <h2 className=\"text-2xl font-display font-semibold\">Basic Information</h2>\n              \n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>App Name *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"My Awesome App\" \n                        {...field} \n                        data-testid=\"input-app-name\"\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Max 100 characters\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"shortDescription\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Short Description *</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"A brief description of what your app does\" \n                        className=\"resize-none h-20\"\n                        {...field} \n                        data-testid=\"input-short-description\"\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Max 200 characters - This appears on the app card\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"fullDescription\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Full Description *</FormLabel>\n                    <Tabs defaultValue=\"edit\" className=\"w-full\">\n                      <TabsList>\n                        <TabsTrigger value=\"edit\">Edit</TabsTrigger>\n                        <TabsTrigger value=\"preview\">Preview</TabsTrigger>\n                      </TabsList>\n                      <TabsContent value=\"edit\">\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"Tell us more about your app. You can use Markdown formatting!\" \n                            className=\"resize-none min-h-48\"\n                            {...field} \n                            data-testid=\"input-full-description\"\n                          />\n                        </FormControl>\n                      </TabsContent>\n                      <TabsContent value=\"preview\">\n                        <div className=\"border rounded-md p-4 min-h-48 prose prose-slate max-w-none\">\n                          <ReactMarkdown remarkPlugins={[remarkGfm]}>\n                            {fullDescription || \"*No content to preview*\"}\n                          </ReactMarkdown>\n                        </div>\n                      </TabsContent>\n                    </Tabs>\n                    <FormDescription>\n                      Max 2000 characters - Markdown supported\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"launchUrl\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Launch URL *</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"url\" \n                        placeholder=\"https://your-app.com\" \n                        {...field} \n                        data-testid=\"input-launch-url\"\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      The URL where users can access your app\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </Card>\n\n            <Card className=\"p-6 space-y-6\">\n              <h2 className=\"text-2xl font-display font-semibold\">Categorization</h2>\n\n              <div>\n                <FormLabel>Vibecoding Tools Used *</FormLabel>\n                {toolsLoading ? (\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3 mt-3\">\n                    {[...Array(6)].map((_, i) => (\n                      <div key={i} className=\"h-8 bg-muted rounded animate-pulse\" />\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3 mt-3\">\n                    {tools?.map((tool) => (\n                      <div key={tool.id} className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={`tool-${tool.id}`}\n                          checked={selectedToolIds.includes(tool.id)}\n                          onCheckedChange={() => toggleTool(tool.id)}\n                          data-testid={`checkbox-tool-${tool.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                        />\n                        <Label htmlFor={`tool-${tool.id}`} className=\"cursor-pointer text-sm\">\n                          {tool.name}\n                        </Label>\n                      </div>\n                    ))}\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"tool-other\"\n                        checked={isOtherToolSelected}\n                        onCheckedChange={(checked) => setIsOtherToolSelected(!!checked)}\n                        data-testid=\"checkbox-tool-other\"\n                      />\n                      <Label htmlFor=\"tool-other\" className=\"cursor-pointer text-sm\">\n                        Other\n                      </Label>\n                    </div>\n                  </div>\n                )}\n                {isOtherToolSelected && (\n                  <div className=\"mt-3\">\n                    <Input\n                      placeholder=\"Enter tool name\"\n                      value={otherToolName}\n                      onChange={(e) => setOtherToolName(e.target.value)}\n                      data-testid=\"input-other-tool\"\n                    />\n                  </div>\n                )}\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"categoryId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Category *</FormLabel>\n                    {categoriesLoading ? (\n                      <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                        {[...Array(6)].map((_, i) => (\n                          <div key={i} className=\"h-8 bg-muted rounded animate-pulse\" />\n                        ))}\n                      </div>\n                    ) : (\n                      <FormControl>\n                        <RadioGroup value={field.value} onValueChange={field.onChange}>\n                          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                            {categories?.map((category) => (\n                              <div key={category.id} className=\"flex items-center space-x-2\">\n                                <RadioGroupItem \n                                  value={category.id} \n                                  id={`category-${category.id}`}\n                                  data-testid={`radio-category-${category.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                                />\n                                <Label htmlFor={`category-${category.id}`} className=\"cursor-pointer text-sm\">\n                                  {category.name}\n                                </Label>\n                              </div>\n                            ))}\n                          </div>\n                        </RadioGroup>\n                      </FormControl>\n                    )}\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div>\n                <FormLabel>Tags (Optional)</FormLabel>\n                <div className=\"flex gap-2 mt-2\">\n                  <Input\n                    placeholder=\"Add a tag\"\n                    value={tagInput}\n                    onChange={(e) => setTagInput(e.target.value)}\n                    onKeyPress={(e) => {\n                      if (e.key === \"Enter\") {\n                        e.preventDefault();\n                        addTag();\n                      }\n                    }}\n                    data-testid=\"input-tag\"\n                  />\n                  <Button \n                    type=\"button\" \n                    onClick={addTag}\n                    disabled={tagNames.length >= 5}\n                    data-testid=\"button-add-tag\"\n                  >\n                    Add\n                  </Button>\n                </div>\n                {tagNames.length > 0 && (\n                  <div className=\"flex flex-wrap gap-2 mt-2\">\n                    {tagNames.map((tag) => (\n                      <div key={tag} className=\"flex items-center gap-1 bg-secondary px-3 py-1 rounded-md text-sm\">\n                        <span data-testid={`badge-tag-${tag}`}>{tag}</span>\n                        <button\n                          type=\"button\"\n                          onClick={() => removeTag(tag)}\n                          className=\"ml-1 hover:text-destructive\"\n                          data-testid={`button-remove-tag-${tag}`}\n                        >\n                          ×\n                        </button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  Max 5 tags\n                </p>\n              </div>\n            </Card>\n\n            <Card className=\"p-6 space-y-6\">\n              <h2 className=\"text-2xl font-display font-semibold\">Preview Image</h2>\n\n              <FormField\n                control={form.control}\n                name=\"screenshotUrl\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>App Screenshot *</FormLabel>\n                    <FormControl>\n                      <ImageUpload\n                        value={field.value}\n                        onChange={field.onChange}\n                        onRemove={() => field.onChange(\"\")}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </Card>\n\n            <Card className=\"p-6 space-y-6\">\n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                  💡\n                </div>\n                <div className=\"flex-1\">\n                  <h2 className=\"text-2xl font-display font-semibold mb-2\">Key Learnings (Optional)</h2>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Share your experience building this app. What challenges did you face? What surprised you? What tips would you give to other builders?\n                  </p>\n                </div>\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"keyLearnings\"\n                render={({ field }) => (\n                  <FormItem>\n                    <Tabs defaultValue=\"edit\" className=\"w-full\">\n                      <TabsList>\n                        <TabsTrigger value=\"edit\">Edit</TabsTrigger>\n                        <TabsTrigger value=\"preview\">Preview</TabsTrigger>\n                      </TabsList>\n                      <TabsContent value=\"edit\">\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"Share your insights, challenges, and tips for other builders...\" \n                            className=\"resize-none min-h-40\"\n                            {...field} \n                            data-testid=\"input-key-learnings\"\n                          />\n                        </FormControl>\n                      </TabsContent>\n                      <TabsContent value=\"preview\">\n                        <div className=\"border rounded-md p-4 min-h-40 prose prose-slate max-w-none\">\n                          <ReactMarkdown remarkPlugins={[remarkGfm]}>\n                            {keyLearnings || \"*No content to preview*\"}\n                          </ReactMarkdown>\n                        </div>\n                      </TabsContent>\n                    </Tabs>\n                    <FormDescription>\n                      Max 1500 characters - Markdown supported\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </Card>\n\n            {validationErrors.length > 0 && (\n              <div className=\"bg-destructive/10 border border-destructive/20 rounded-lg p-4\" data-testid=\"validation-error-container\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"text-destructive mt-0.5\">\n                    <AlertCircle className=\"w-5 h-5\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"text-sm font-semibold text-destructive mb-2\" data-testid=\"validation-error-title\">\n                      Missing Required Fields\n                    </h3>\n                    <p className=\"text-sm text-destructive/90 mb-2\">\n                      Please fill in the following required fields:\n                    </p>\n                    <ul className=\"list-disc list-inside text-sm text-destructive/90 space-y-1\">\n                      {validationErrors.map((field, index) => (\n                        <li key={index} data-testid={`validation-error-field-${index}`}>{field}</li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <div className=\"flex justify-end gap-4 pt-6\">\n              <Link href=\"/\">\n                <Button type=\"button\" variant=\"outline\" data-testid=\"button-cancel\">\n                  Cancel\n                </Button>\n              </Link>\n              <Button \n                type=\"submit\" \n                size=\"lg\"\n                disabled={submitMutation.isPending}\n                className=\"px-8\"\n                data-testid=\"button-submit\"\n              >\n                {submitMutation.isPending ? \"Submitting...\" : \"Submit App\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21984},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport connectPgSimple from \"connect-pg-simple\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport passport from \"./googleAuth\";\nimport { pool } from \"./db\";\n\nconst PgSession = connectPgSimple(session);\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session configuration\napp.use(\n  session({\n    store: new PgSession({\n      pool,\n      tableName: \"sessions\",\n      createTableIfMissing: true,\n    }),\n    secret: process.env.SESSION_SECRET || \"your-secret-key-change-this\",\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: \"lax\",\n    },\n  })\n);\n\n// Initialize Passport\napp.use(passport.initialize());\napp.use(passport.session());\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2807},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nconst toolColors: Record<string, string> = {\n  \"Replit Agent\": \"bg-[hsl(262,80%,50%)]/10 text-[hsl(262,80%,50%)] border-[hsl(262,80%,50%)]/20\",\n  \"Bolt.new\": \"bg-[hsl(45,100%,51%)]/10 text-[hsl(45,90%,40%)] border-[hsl(45,100%,51%)]/20\",\n  \"v0\": \"bg-[hsl(0,0%,15%)]/10 text-[hsl(0,0%,15%)] border-[hsl(0,0%,15%)]/20\",\n  \"Cursor\": \"bg-[hsl(200,100%,45%)]/10 text-[hsl(200,100%,35%)] border-[hsl(200,100%,45%)]/20\",\n  \"Claude\": \"bg-[hsl(33,82%,55%)]/10 text-[hsl(33,82%,45%)] border-[hsl(33,82%,55%)]/20\",\n  \"ChatGPT\": \"bg-[hsl(171,65%,45%)]/10 text-[hsl(171,65%,35%)] border-[hsl(171,65%,45%)]/20\",\n  \"Lovable\": \"bg-[hsl(340,75%,55%)]/10 text-[hsl(340,75%,45%)] border-[hsl(340,75%,55%)]/20\",\n  \"Windsurf\": \"bg-[hsl(195,80%,48%)]/10 text-[hsl(195,80%,38%)] border-[hsl(195,80%,48%)]/20\",\n  \"Other\": \"bg-muted/50 text-muted-foreground border-border\",\n};\n\nexport function getToolColor(tool: string): string {\n  return toolColors[tool] || toolColors[\"Other\"];\n}\n","size_bytes":1125},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, index, jsonb, decimal, unique, primaryKey } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// ============================================================================\n// 1. USER & AUTHENTICATION TABLES\n// ============================================================================\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  email: varchar(\"email\", { length: 255 }).notNull().unique(),\n  profilePictureUrl: varchar(\"profile_picture_url\", { length: 255 }),\n  bio: text(\"bio\"),\n  socialLink1: varchar(\"social_link_1\", { length: 255 }),\n  socialLink2: varchar(\"social_link_2\", { length: 255 }),\n  role: varchar(\"role\", { length: 20 }).notNull().default(\"user\"), // 'user' or 'admin'\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport type User = typeof users.$inferSelect;\nexport type UpsertUser = typeof users.$inferInsert;\n\nexport const userAuthentications = pgTable(\"user_authentications\", {\n  provider: varchar(\"provider\", { length: 50 }).notNull(),\n  providerId: varchar(\"provider_id\", { length: 255 }).notNull(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  pk: primaryKey({ columns: [table.provider, table.providerId] }),\n}));\n\nexport type UserAuthentication = typeof userAuthentications.$inferSelect;\nexport type InsertUserAuthentication = typeof userAuthentications.$inferInsert;\n\n// ============================================================================\n// 2. CORE CONTENT TABLES\n// ============================================================================\n\nexport const apps = pgTable(\"apps\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  shortDescription: varchar(\"short_description\", { length: 200 }).notNull(),\n  fullDescription: text(\"full_description\").notNull(),\n  launchUrl: varchar(\"launch_url\", { length: 255 }).notNull(),\n  screenshotUrl: varchar(\"screenshot_url\", { length: 255 }).notNull(),\n  keyLearnings: text(\"key_learnings\"),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"draft\"), // 'draft' or 'published'\n  viewCount: integer(\"view_count\").notNull().default(0),\n  averageRating: decimal(\"average_rating\", { precision: 4, scale: 2 }).notNull().default(\"0.00\"),\n  ratingCount: integer(\"rating_count\").notNull().default(0),\n  creatorId: varchar(\"creator_id\").references(() => users.id, { onDelete: \"set null\" }),\n  categoryId: varchar(\"category_id\").references(() => categories.id, { onDelete: \"set null\" }),\n  createdAt: timestamp(\"created_date\").notNull().defaultNow(), // using created_date to match DB\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport type App = typeof apps.$inferSelect;\n\nexport const insertAppSchema = createInsertSchema(apps).omit({\n  id: true,\n  viewCount: true,\n  averageRating: true,\n  ratingCount: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  name: z.string().min(1, \"App name is required\").max(100),\n  shortDescription: z.string().min(1, \"Short description is required\").max(200),\n  fullDescription: z.string().min(1, \"Full description is required\").max(2000),\n  launchUrl: z.string().url(\"Must be a valid URL\"),\n  screenshotUrl: z.string().min(1, \"Screenshot is required\"),\n  keyLearnings: z.string().max(1500).optional(),\n  status: z.enum([\"draft\", \"published\"]).default(\"draft\"),\n  creatorId: z.string().optional(),\n  categoryId: z.string().min(1, \"Category is required\"),\n});\n\nexport type InsertApp = z.infer<typeof insertAppSchema>;\n\n// ============================================================================\n// 3. TAXONOMY TABLES (Categories, Tools, Tags)\n// ============================================================================\n\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 50 }).notNull().unique(),\n});\n\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = typeof categories.$inferInsert;\n\nexport const tools = pgTable(\"tools\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 100 }).notNull().unique(),\n  websiteUrl: varchar(\"website_url\", { length: 255 }),\n  logoUrl: varchar(\"logo_url\", { length: 255 }),\n});\n\nexport type Tool = typeof tools.$inferSelect;\nexport type InsertTool = typeof tools.$inferInsert;\n\nexport const tags = pgTable(\"tags\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 50 }).notNull().unique(),\n});\n\nexport type Tag = typeof tags.$inferSelect;\nexport type InsertTag = typeof tags.$inferInsert;\n\n// ============================================================================\n// 4. JOIN TABLES (Many-to-Many Relationships)\n// ============================================================================\n\nexport const appTools = pgTable(\"app_tools\", {\n  appId: varchar(\"app_id\").notNull().references(() => apps.id, { onDelete: \"cascade\" }),\n  toolId: varchar(\"tool_id\").notNull().references(() => tools.id, { onDelete: \"cascade\" }),\n}, (table) => ({\n  pk: primaryKey({ columns: [table.appId, table.toolId] }),\n}));\n\nexport type AppTool = typeof appTools.$inferSelect;\nexport type InsertAppTool = typeof appTools.$inferInsert;\n\nexport const appTags = pgTable(\"app_tags\", {\n  appId: varchar(\"app_id\").notNull().references(() => apps.id, { onDelete: \"cascade\" }),\n  tagId: varchar(\"tag_id\").notNull().references(() => tags.id, { onDelete: \"cascade\" }),\n}, (table) => ({\n  pk: primaryKey({ columns: [table.appId, table.tagId] }),\n}));\n\nexport type AppTag = typeof appTags.$inferSelect;\nexport type InsertAppTag = typeof appTags.$inferInsert;\n\n// ============================================================================\n// 5. USER INTERACTION TABLES (Reviews, Comments)\n// ============================================================================\n\nexport const reviews = pgTable(\"reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  appId: varchar(\"app_id\").notNull().references(() => apps.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"set null\" }),\n  rating: integer(\"rating\").notNull(), // 1-10\n  title: varchar(\"title\", { length: 150 }),\n  body: text(\"body\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  uniqueUserReview: unique(\"unique_user_review\").on(table.appId, table.userId),\n}));\n\nexport type Review = typeof reviews.$inferSelect;\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  rating: z.number().int().min(1, \"Rating must be at least 1\").max(10, \"Rating must be at most 10\"),\n  title: z.string().max(150).optional(),\n  body: z.string().max(2000).optional(),\n});\n\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\n\nexport const comments = pgTable(\"comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  content: text(\"content\").notNull(),\n  appId: varchar(\"app_id\").notNull().references(() => apps.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"set null\" }),\n  parentCommentId: varchar(\"parent_comment_id\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport type Comment = typeof comments.$inferSelect;\n\nexport const insertCommentSchema = createInsertSchema(comments).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  content: z.string().min(1, \"Comment cannot be empty\").max(2000),\n  appId: z.string().min(1),\n  userId: z.string().min(1),\n  parentCommentId: z.string().optional(),\n});\n\nexport type InsertComment = z.infer<typeof insertCommentSchema>;\n\n// ============================================================================\n// 6. TOOL SUGGESTION WORKFLOW\n// ============================================================================\n\nexport const toolSuggestions = pgTable(\"tool_suggestions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  suggestedName: varchar(\"suggested_name\", { length: 100 }).notNull(),\n  appId: varchar(\"app_id\").notNull().references(() => apps.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"set null\" }),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"pending\"), // 'pending', 'approved', 'rejected'\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport type ToolSuggestion = typeof toolSuggestions.$inferSelect;\n\nexport const insertToolSuggestionSchema = createInsertSchema(toolSuggestions).omit({\n  id: true,\n  status: true,\n  createdAt: true,\n}).extend({\n  suggestedName: z.string().min(1, \"Tool name is required\").max(100),\n  appId: z.string().min(1),\n  userId: z.string().min(1),\n});\n\nexport type InsertToolSuggestion = z.infer<typeof insertToolSuggestionSchema>;\n\n// ============================================================================\n// 7. SESSION STORAGE (for authentication)\n// ============================================================================\n\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// ============================================================================\n// 8. CONSTANTS & ENUMS\n// ============================================================================\n\nexport const USER_ROLES = [\"user\", \"admin\"] as const;\nexport const APP_STATUS = [\"draft\", \"published\"] as const;\nexport const SUGGESTION_STATUS = [\"pending\", \"approved\", \"rejected\"] as const;\n\n// ============================================================================\n// 9. API RESPONSE TYPES (for compatibility with old database structure)\n// ============================================================================\n\nexport interface AppListing {\n  id: string;\n  name: string;\n  shortDescription: string;\n  fullDescription: string;\n  launchUrl: string;\n  vibecodingTools: string[];\n  category: string;\n  creatorName: string;\n  creatorContact?: string | null;\n  previewImage: string;\n  tags?: string[] | null;\n  keyLearnings?: string | null;\n  launchCount: number;\n  createdDate: Date | string;\n  submissionDate: Date | string;\n  status: string;\n  screenshotUrl: string;\n  creatorId?: string | null;\n  categoryId?: string | null;\n}\n","size_bytes":10939},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 220 13% 18%;\n\n  --border: 220 13% 91%;\n\n  --card: 240 5% 96%;\n\n  --card-foreground: 220 13% 18%;\n\n  --card-border: 240 5% 88%;\n\n  --sidebar: 240 5% 94%;\n\n  --sidebar-foreground: 220 13% 18%;\n\n  --sidebar-border: 240 5% 86%;\n\n  --sidebar-primary: 262 80% 50%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 240 5% 90%;\n\n  --sidebar-accent-foreground: 220 13% 18%;\n\n  --sidebar-ring: 262 80% 50%;\n\n  --popover: 240 5% 92%;\n\n  --popover-foreground: 220 13% 18%;\n\n  --popover-border: 240 5% 84%;\n\n  --primary: 262 80% 50%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 240 5% 88%;\n\n  --secondary-foreground: 220 13% 18%;\n\n  --muted: 240 6% 90%;\n\n  --muted-foreground: 220 9% 46%;\n\n  --accent: 262 12% 92%;\n\n  --accent-foreground: 220 13% 18%;\n\n  --destructive: 0 84% 45%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 220 13% 75%;\n  --ring: 262 80% 50%;\n  --chart-1: 262 80% 50%;\n  --chart-2: 142 76% 36%;\n  --chart-3: 200 100% 45%;\n  --chart-4: 45 100% 51%;\n  --chart-5: 340 75% 55%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 13% 18% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 13% 18% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(220 13% 18% / 0.06), 0px 1px 2px -1px hsl(220 13% 18% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(220 13% 18% / 0.08), 0px 2px 4px -2px hsl(220 13% 18% / 0.05);\n  --shadow-md: 0px 6px 12px -2px hsl(220 13% 18% / 0.10), 0px 3px 6px -3px hsl(220 13% 18% / 0.06);\n  --shadow-lg: 0px 10px 20px -4px hsl(220 13% 18% / 0.12), 0px 4px 8px -4px hsl(220 13% 18% / 0.08);\n  --shadow-xl: 0px 20px 30px -6px hsl(220 13% 18% / 0.15), 0px 8px 12px -6px hsl(220 13% 18% / 0.10);\n  --shadow-2xl: 0px 25px 40px -8px hsl(220 13% 18% / 0.18);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 47% 11%;\n\n  --foreground: 210 40% 98%;\n\n  --border: 217 33% 24%;\n\n  --card: 217 33% 17%;\n\n  --card-foreground: 210 40% 98%;\n\n  --card-border: 217 33% 26%;\n\n  --sidebar: 217 33% 19%;\n\n  --sidebar-foreground: 210 40% 98%;\n\n  --sidebar-border: 217 33% 28%;\n\n  --sidebar-primary: 262 70% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 217 33% 22%;\n\n  --sidebar-accent-foreground: 210 40% 98%;\n\n  --sidebar-ring: 262 70% 60%;\n\n  --popover: 217 33% 21%;\n\n  --popover-foreground: 210 40% 98%;\n\n  --popover-border: 217 33% 30%;\n\n  --primary: 262 70% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 217 33% 24%;\n\n  --secondary-foreground: 210 40% 98%;\n\n  --muted: 217 20% 23%;\n\n  --muted-foreground: 215 20% 65%;\n\n  --accent: 262 10% 25%;\n\n  --accent-foreground: 210 40% 98%;\n\n  --destructive: 0 84% 50%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 215 20% 45%;\n  --ring: 262 70% 60%;\n  --chart-1: 262 70% 65%;\n  --chart-2: 142 70% 45%;\n  --chart-3: 200 90% 55%;\n  --chart-4: 45 95% 60%;\n  --chart-5: 340 70% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(222 47% 5% / 0.30);\n  --shadow-xs: 0px 1px 3px 0px hsl(222 47% 5% / 0.40);\n  --shadow-sm: 0px 2px 4px 0px hsl(222 47% 5% / 0.35), 0px 1px 2px -1px hsl(222 47% 5% / 0.25);\n  --shadow: 0px 4px 6px -1px hsl(222 47% 5% / 0.45), 0px 2px 4px -2px hsl(222 47% 5% / 0.30);\n  --shadow-md: 0px 6px 12px -2px hsl(222 47% 5% / 0.50), 0px 3px 6px -3px hsl(222 47% 5% / 0.35);\n  --shadow-lg: 0px 10px 20px -4px hsl(222 47% 5% / 0.55), 0px 4px 8px -4px hsl(222 47% 5% / 0.40);\n  --shadow-xl: 0px 20px 30px -6px hsl(222 47% 5% / 0.60), 0px 8px 12px -6px hsl(222 47% 5% / 0.45);\n  --shadow-2xl: 0px 25px 40px -8px hsl(222 47% 5% / 0.65);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9871},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"server/migrate-schema.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-serverless\";\nimport { neonConfig, Pool } from \"@neondatabase/serverless\";\nimport ws from \"ws\";\nimport { sql } from \"drizzle-orm\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL! });\nconst db = drizzle(pool, { schema });\n\nasync function migrate() {\n  console.log(\"🔄 Starting database migration...\");\n\n  try {\n    // Create user_authentications table\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS user_authentications (\n        provider VARCHAR(50) NOT NULL,\n        provider_id VARCHAR(255) NOT NULL,\n        user_id VARCHAR NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n        created_at TIMESTAMP NOT NULL DEFAULT NOW(),\n        PRIMARY KEY (provider, provider_id)\n      )\n    `);\n    console.log(\"✅ Created user_authentications table\");\n\n    // Update users table - add new columns\n    await db.execute(sql`\n      ALTER TABLE users \n      ADD COLUMN IF NOT EXISTS name VARCHAR(100),\n      ADD COLUMN IF NOT EXISTS bio TEXT,\n      ADD COLUMN IF NOT EXISTS social_link_1 VARCHAR(255),\n      ADD COLUMN IF NOT EXISTS social_link_2 VARCHAR(255),\n      ADD COLUMN IF NOT EXISTS role VARCHAR(20) DEFAULT 'user'\n    `);\n    \n    // Populate name column from existing first_name and last_name\n    await db.execute(sql`\n      UPDATE users \n      SET name = COALESCE(\n        NULLIF(TRIM(CONCAT(COALESCE(first_name, ''), ' ', COALESCE(last_name, ''))), ''),\n        'User'\n      )\n      WHERE name IS NULL\n    `);\n    \n    // Set name as NOT NULL after populating\n    await db.execute(sql`\n      ALTER TABLE users \n      ALTER COLUMN name SET NOT NULL\n    `);\n    \n    // Rename profile_image_url to profile_picture_url if needed\n    await db.execute(sql`\n      DO $$ \n      BEGIN\n        IF EXISTS (\n          SELECT 1 FROM information_schema.columns \n          WHERE table_name = 'users' AND column_name = 'profile_image_url'\n        ) THEN\n          ALTER TABLE users RENAME COLUMN profile_image_url TO profile_picture_url;\n        END IF;\n      END $$;\n    `);\n    \n    console.log(\"✅ Updated users table\");\n\n    // Rename app_listings to apps if needed\n    await db.execute(sql`\n      DO $$ \n      BEGIN\n        IF EXISTS (\n          SELECT 1 FROM information_schema.tables \n          WHERE table_name = 'app_listings'\n        ) THEN\n          ALTER TABLE app_listings RENAME TO apps;\n        END IF;\n      END $$;\n    `);\n    \n    await db.execute(sql`\n      ALTER TABLE apps\n      ADD COLUMN IF NOT EXISTS screenshot_url VARCHAR(255),\n      ADD COLUMN IF NOT EXISTS creator_id VARCHAR REFERENCES users(id) ON DELETE SET NULL,\n      ADD COLUMN IF NOT EXISTS category_id VARCHAR,\n      ADD COLUMN IF NOT EXISTS view_count INTEGER DEFAULT 0,\n      ADD COLUMN IF NOT EXISTS average_rating DECIMAL(3,2) DEFAULT 0.00,\n      ADD COLUMN IF NOT EXISTS rating_count INTEGER DEFAULT 0,\n      ALTER COLUMN status SET DEFAULT 'draft'\n    `);\n    \n    // Migrate preview_image to screenshot_url\n    await db.execute(sql`\n      UPDATE apps \n      SET screenshot_url = preview_image \n      WHERE screenshot_url IS NULL\n    `);\n    \n    // Set screenshot_url as NOT NULL\n    await db.execute(sql`\n      ALTER TABLE apps \n      ALTER COLUMN screenshot_url SET NOT NULL\n    `);\n    \n    console.log(\"✅ Renamed and updated apps table\");\n\n    // Create categories table\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS categories (\n        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n        name VARCHAR(50) NOT NULL UNIQUE\n      )\n    `);\n    \n    // Insert default categories\n    await db.execute(sql`\n      INSERT INTO categories (name) VALUES \n        ('Productivity'),\n        ('Education'),\n        ('Entertainment'),\n        ('Business'),\n        ('Developer Tools'),\n        ('Design'),\n        ('Other')\n      ON CONFLICT (name) DO NOTHING\n    `);\n    console.log(\"✅ Created categories table\");\n\n    // Create tools table\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS tools (\n        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n        name VARCHAR(100) NOT NULL UNIQUE,\n        website_url VARCHAR(255),\n        logo_url VARCHAR(255)\n      )\n    `);\n    \n    // Insert default tools\n    await db.execute(sql`\n      INSERT INTO tools (name) VALUES \n        ('Replit Agent'),\n        ('Bolt.new'),\n        ('v0'),\n        ('Cursor'),\n        ('Claude'),\n        ('ChatGPT'),\n        ('Lovable'),\n        ('Windsurf'),\n        ('Other')\n      ON CONFLICT (name) DO NOTHING\n    `);\n    console.log(\"✅ Created tools table\");\n\n    // Create tags table\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS tags (\n        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n        name VARCHAR(50) NOT NULL UNIQUE\n      )\n    `);\n    console.log(\"✅ Created tags table\");\n\n    // Create app_tools join table\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS app_tools (\n        app_id VARCHAR NOT NULL REFERENCES apps(id) ON DELETE CASCADE,\n        tool_id VARCHAR NOT NULL REFERENCES tools(id) ON DELETE CASCADE,\n        PRIMARY KEY (app_id, tool_id)\n      )\n    `);\n    console.log(\"✅ Created app_tools table\");\n\n    // Create app_tags join table\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS app_tags (\n        app_id VARCHAR NOT NULL REFERENCES apps(id) ON DELETE CASCADE,\n        tag_id VARCHAR NOT NULL REFERENCES tags(id) ON DELETE CASCADE,\n        PRIMARY KEY (app_id, tag_id)\n      )\n    `);\n    console.log(\"✅ Created app_tags table\");\n\n    // Update reviews table for 1-10 rating\n    await db.execute(sql`\n      ALTER TABLE reviews\n      ADD COLUMN IF NOT EXISTS title VARCHAR(150),\n      ADD COLUMN IF NOT EXISTS body TEXT,\n      ADD COLUMN IF NOT EXISTS updated_at TIMESTAMP DEFAULT NOW()\n    `);\n    \n    // Rename review_text to body if needed\n    await db.execute(sql`\n      DO $$ \n      BEGIN\n        IF EXISTS (\n          SELECT 1 FROM information_schema.columns \n          WHERE table_name = 'reviews' AND column_name = 'review_text'\n        ) AND NOT EXISTS (\n          SELECT 1 FROM information_schema.columns \n          WHERE table_name = 'reviews' AND column_name = 'body'\n        ) THEN\n          ALTER TABLE reviews RENAME COLUMN review_text TO body;\n        ELSIF EXISTS (\n          SELECT 1 FROM information_schema.columns \n          WHERE table_name = 'reviews' AND column_name = 'review_text'\n        ) AND EXISTS (\n          SELECT 1 FROM information_schema.columns \n          WHERE table_name = 'reviews' AND column_name = 'body'\n        ) THEN\n          -- Both exist, drop review_text\n          ALTER TABLE reviews DROP COLUMN review_text;\n        END IF;\n      END $$;\n    `);\n    console.log(\"✅ Updated reviews table\");\n\n    // Create comments table\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS comments (\n        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n        content TEXT NOT NULL,\n        app_id VARCHAR NOT NULL REFERENCES apps(id) ON DELETE CASCADE,\n        user_id VARCHAR REFERENCES users(id) ON DELETE SET NULL,\n        parent_comment_id VARCHAR REFERENCES comments(id) ON DELETE CASCADE,\n        created_at TIMESTAMP NOT NULL DEFAULT NOW()\n      )\n    `);\n    console.log(\"✅ Created comments table\");\n\n    // Create tool_suggestions table\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS tool_suggestions (\n        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n        suggested_name VARCHAR(100) NOT NULL,\n        app_id VARCHAR NOT NULL REFERENCES apps(id) ON DELETE CASCADE,\n        user_id VARCHAR REFERENCES users(id) ON DELETE SET NULL,\n        status VARCHAR(20) NOT NULL DEFAULT 'pending',\n        created_at TIMESTAMP NOT NULL DEFAULT NOW()\n      )\n    `);\n    console.log(\"✅ Created tool_suggestions table\");\n\n    // Add foreign key for category_id after categories table exists\n    await db.execute(sql`\n      ALTER TABLE apps\n      ADD CONSTRAINT apps_category_id_fkey \n      FOREIGN KEY (category_id) \n      REFERENCES categories(id) \n      ON DELETE SET NULL\n    `);\n    console.log(\"✅ Added category foreign key to apps\");\n\n    console.log(\"✅ Migration completed successfully!\");\n  } catch (error) {\n    console.error(\"❌ Migration failed:\", error);\n    throw error;\n  } finally {\n    await pool.end();\n  }\n}\n\nmigrate();\n","size_bytes":8352},"client/src/components/CommentsSection.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { MessageCircle, Reply, User as UserIcon } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { Comment, User as UserType } from \"@shared/schema\";\n\ninterface CommentWithUser extends Comment {\n  user?: UserType | null;\n  replies?: CommentWithUser[];\n}\n\ninterface CommentsSectionProps {\n  appId: string;\n}\n\nfunction CommentItem({ \n  comment, \n  onReply,\n  isReply = false \n}: { \n  comment: CommentWithUser; \n  onReply: (commentId: string) => void;\n  isReply?: boolean;\n}) {\n  const userName = comment.user \n    ? comment.user.name || comment.user.email \n    : \"Deleted User\";\n    \n  return (\n    <div className={`${isReply ? 'ml-12' : ''}`} data-testid={`comment-${comment.id}`}>\n      <div className=\"flex items-start gap-3\">\n        <Avatar className=\"h-8 w-8\">\n          <AvatarImage src={comment.user?.profilePictureUrl || undefined} />\n          <AvatarFallback>\n            <UserIcon className=\"h-4 w-4\" />\n          </AvatarFallback>\n        </Avatar>\n        <div className=\"flex-1\">\n          <div className=\"flex items-center gap-2 mb-1\">\n            <p className=\"font-medium text-sm\" data-testid={`comment-author-${comment.id}`}>\n              {userName}\n            </p>\n            <span className=\"text-xs text-muted-foreground\">\n              {comment.createdAt && formatDistanceToNow(new Date(comment.createdAt), { addSuffix: true })}\n            </span>\n          </div>\n          <p className=\"text-sm text-foreground mb-2\" data-testid={`comment-text-${comment.id}`}>\n            {comment.content}\n          </p>\n          {!isReply && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-7 px-2 text-xs\"\n              onClick={() => onReply(comment.id)}\n              data-testid={`button-reply-${comment.id}`}\n            >\n              <Reply className=\"h-3 w-3 mr-1\" />\n              Reply\n            </Button>\n          )}\n        </div>\n      </div>\n      \n      {/* Render replies */}\n      {comment.replies && comment.replies.length > 0 && (\n        <div className=\"mt-3 space-y-3\">\n          {comment.replies.map((reply) => (\n            <CommentItem key={reply.id} comment={reply} onReply={onReply} isReply />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport function CommentsSection({ appId }: CommentsSectionProps) {\n  const { user, isAuthenticated, signInWithGoogle } = useAuth();\n  const { toast } = useToast();\n  const [commentText, setCommentText] = useState(\"\");\n  const [replyingToId, setReplyingToId] = useState<string | null>(null);\n  const [replyText, setReplyText] = useState(\"\");\n\n  const { data: comments = [] } = useQuery<CommentWithUser[]>({\n    queryKey: [\"/api/apps\", appId, \"comments\"],\n  });\n\n  // Organize comments into parent-child structure\n  const organizedComments = comments.reduce((acc, comment) => {\n    if (!comment.parentCommentId) {\n      // This is a top-level comment\n      const replies = comments.filter(c => c.parentCommentId === comment.id);\n      acc.push({ ...comment, replies });\n    }\n    return acc;\n  }, [] as CommentWithUser[]);\n\n  const addCommentMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", `/api/apps/${appId}/comments`, {\n        content: commentText.trim(),\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Comment Added\",\n        description: \"Your comment has been posted!\",\n      });\n      setCommentText(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/apps\", appId, \"comments\"] });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Please log in to add a comment.\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          signInWithGoogle();\n        }, 500);\n        return;\n      }\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Failed to add comment. Please try again.\",\n      });\n    },\n  });\n\n  const addReplyMutation = useMutation({\n    mutationFn: async () => {\n      if (!replyingToId) return;\n      const response = await apiRequest(\"POST\", `/api/apps/${appId}/comments`, {\n        content: replyText.trim(),\n        parentCommentId: replyingToId,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Reply Added\",\n        description: \"Your reply has been posted!\",\n      });\n      setReplyText(\"\");\n      setReplyingToId(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/apps\", appId, \"comments\"] });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Please log in to reply.\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          signInWithGoogle();\n        }, 500);\n        return;\n      }\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Failed to add reply. Please try again.\",\n      });\n    },\n  });\n\n  const handleReply = (commentId: string) => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Please log in to reply.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        signInWithGoogle();\n      }, 500);\n      return;\n    }\n    setReplyingToId(commentId);\n  };\n\n  return (\n    <Card className=\"p-6\">\n      <h2 className=\"text-2xl font-heading font-bold mb-6 flex items-center gap-2\">\n        <MessageCircle className=\"h-6 w-6\" />\n        Comments ({organizedComments.length})\n      </h2>\n\n      {/* Add Comment Form */}\n      {isAuthenticated ? (\n        <div className=\"mb-6 pb-6 border-b\">\n          <div className=\"space-y-3\">\n            <Textarea\n              placeholder=\"Share your thoughts about this app...\"\n              value={commentText}\n              onChange={(e) => setCommentText(e.target.value)}\n              maxLength={1000}\n              rows={3}\n              data-testid=\"textarea-comment\"\n            />\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-xs text-muted-foreground\">\n                {commentText.length}/1000 characters\n              </div>\n              <Button\n                onClick={() => addCommentMutation.mutate()}\n                disabled={addCommentMutation.isPending || !commentText.trim()}\n                data-testid=\"button-submit-comment\"\n              >\n                {addCommentMutation.isPending ? \"Posting...\" : \"Post Comment\"}\n              </Button>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-6 pb-6 border-b\">\n          <p className=\"text-sm text-muted-foreground mb-3\">\n            Please log in to add a comment.\n          </p>\n          <Button size=\"sm\" data-testid=\"button-login-to-comment\" onClick={signInWithGoogle}>\n            Log In to Comment\n          </Button>\n        </div>\n      )}\n\n      {/* Comments List */}\n      <div className=\"space-y-4\">\n        {organizedComments.length === 0 ? (\n          <p className=\"text-muted-foreground text-center py-8\">\n            No comments yet. Be the first to share your thoughts!\n          </p>\n        ) : (\n          organizedComments.map((comment) => (\n            <div key={comment.id} className=\"border-b last:border-0 pb-4 last:pb-0\">\n              <CommentItem comment={comment} onReply={handleReply} />\n              \n              {/* Reply Form */}\n              {replyingToId === comment.id && (\n                <div className=\"ml-12 mt-3 space-y-3\">\n                  <Textarea\n                    placeholder=\"Write your reply...\"\n                    value={replyText}\n                    onChange={(e) => setReplyText(e.target.value)}\n                    maxLength={1000}\n                    rows={2}\n                    data-testid={`textarea-reply-${comment.id}`}\n                  />\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"text-xs text-muted-foreground\">\n                      {replyText.length}/1000 characters\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => {\n                          setReplyingToId(null);\n                          setReplyText(\"\");\n                        }}\n                        data-testid={`button-cancel-reply-${comment.id}`}\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        onClick={() => addReplyMutation.mutate()}\n                        disabled={addReplyMutation.isPending || !replyText.trim()}\n                        data-testid={`button-submit-reply-${comment.id}`}\n                      >\n                        {addReplyMutation.isPending ? \"Posting...\" : \"Post Reply\"}\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          ))\n        )}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":9867},"server/googleAuth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\nimport type { Request, Response, NextFunction } from \"express\";\nimport { storage } from \"./storage\";\nimport type { User, UpsertUser } from \"@shared/schema\";\n\nconst GOOGLE_CLIENT_ID = process.env.GOOGLE_CLIENT_ID;\nconst GOOGLE_CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET;\nconst CALLBACK_URL = process.env.REPLIT_DEV_DOMAIN \n  ? `https://${process.env.REPLIT_DEV_DOMAIN}/api/callback`\n  : \"http://localhost:5000/api/callback\";\n\nif (!GOOGLE_CLIENT_ID || !GOOGLE_CLIENT_SECRET) {\n  throw new Error(\"GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET must be set\");\n}\n\n// Configure Google OAuth strategy\npassport.use(\n  new GoogleStrategy(\n    {\n      clientID: GOOGLE_CLIENT_ID,\n      clientSecret: GOOGLE_CLIENT_SECRET,\n      callbackURL: CALLBACK_URL,\n      scope: [\"profile\", \"email\"],\n    },\n    async (accessToken, refreshToken, profile, done) => {\n      try {\n        const email = profile.emails?.[0]?.value;\n        if (!email) {\n          return done(new Error(\"No email found in Google profile\"));\n        }\n\n        const userData: UpsertUser = {\n          id: profile.id,\n          email,\n          name: profile.displayName || \"\",\n          profilePictureUrl: profile.photos?.[0]?.value || null,\n          bio: null,\n          socialLink1: null,\n          socialLink2: null,\n          role: \"user\",\n        };\n\n        // Upsert user to database\n        const user = await storage.upsertUser(userData);\n        return done(null, user);\n      } catch (error) {\n        return done(error as Error);\n      }\n    }\n  )\n);\n\n// Serialize user to session\npassport.serializeUser((user: any, done) => {\n  done(null, user.id);\n});\n\n// Deserialize user from session\npassport.deserializeUser(async (id: string, done) => {\n  try {\n    const user = await storage.getUserById(id);\n    done(null, user);\n  } catch (error) {\n    done(error);\n  }\n});\n\n// Middleware to check if user is authenticated\nexport function isAuthenticated(req: Request, res: Response, next: NextFunction) {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ error: \"Unauthorized\" });\n}\n\nexport default passport;\n","size_bytes":2206},"client/src/components/ImageUpload.tsx":{"content":"import { useState, useRef, useCallback } from \"react\";\nimport { Upload, X, Image as ImageIcon } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ImageUploadProps {\n  value?: string;\n  onChange: (url: string) => void;\n  onRemove?: () => void;\n}\n\nexport function ImageUpload({ value, onChange, onRemove }: ImageUploadProps) {\n  const [isDragging, setIsDragging] = useState(false);\n  const [isUploading, setIsUploading] = useState(false);\n  const [preview, setPreview] = useState<string | null>(value || null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const handleUpload = useCallback(async (file: File) => {\n    if (!file.type.startsWith(\"image/\")) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please upload an image file\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (file.size > 5 * 1024 * 1024) {\n      toast({\n        title: \"File too large\",\n        description: \"Image must be less than 5MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsUploading(true);\n\n    try {\n      // Get upload URL\n      const uploadResponse = await fetch(\"/api/objects/upload\", {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n      const uploadData = await uploadResponse.json();\n\n      // Upload file\n      await fetch(uploadData.uploadURL, {\n        method: \"PUT\",\n        body: file,\n        headers: {\n          \"Content-Type\": file.type,\n        },\n      });\n\n      // Get object path\n      const pathResponse = await apiRequest(\"PUT\", \"/api/apps/image\", {\n        imageURL: uploadData.uploadURL,\n      });\n      const pathData = await pathResponse.json();\n\n      // Set preview and notify parent\n      const previewUrl = pathData.objectPath;\n      setPreview(previewUrl);\n      onChange(previewUrl);\n\n      toast({\n        title: \"Image uploaded\",\n        description: \"Your screenshot has been uploaded successfully.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Upload failed\",\n        description: \"Failed to upload image. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  }, [onChange, toast]);\n\n  const handleDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(false);\n\n    const file = e.dataTransfer.files[0];\n    if (file) {\n      handleUpload(file);\n    }\n  }, [handleUpload]);\n\n  const handleDragOver = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(true);\n  }, []);\n\n  const handleDragLeave = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(false);\n  }, []);\n\n  const handleFileSelect = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      handleUpload(file);\n    }\n  }, [handleUpload]);\n\n  const handleRemove = useCallback(() => {\n    setPreview(null);\n    onRemove?.();\n    if (fileInputRef.current) {\n      fileInputRef.current.value = \"\";\n    }\n  }, [onRemove]);\n\n  return (\n    <div className=\"space-y-4\">\n      {preview ? (\n        <div className=\"relative group\">\n          <img\n            src={preview}\n            alt=\"Preview\"\n            className=\"w-full h-64 object-cover rounded-md border\"\n            data-testid=\"img-preview\"\n          />\n          <div className=\"absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity rounded-md flex items-center justify-center gap-2\">\n            <Button\n              type=\"button\"\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={() => fileInputRef.current?.click()}\n              data-testid=\"button-change-image\"\n            >\n              <Upload className=\"w-4 h-4 mr-2\" />\n              Change\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"destructive\"\n              size=\"sm\"\n              onClick={handleRemove}\n              data-testid=\"button-remove-image\"\n            >\n              <X className=\"w-4 h-4 mr-2\" />\n              Remove\n            </Button>\n          </div>\n        </div>\n      ) : (\n        <div\n          onDrop={handleDrop}\n          onDragOver={handleDragOver}\n          onDragLeave={handleDragLeave}\n          className={`\n            border-2 border-dashed rounded-md p-8 text-center transition-colors\n            ${isDragging ? \"border-primary bg-primary/5\" : \"border-border hover:border-primary/50\"}\n            ${isUploading ? \"opacity-50 pointer-events-none\" : \"cursor-pointer\"}\n          `}\n          onClick={() => fileInputRef.current?.click()}\n          data-testid=\"dropzone-upload\"\n        >\n          <div className=\"flex flex-col items-center gap-4\">\n            <div className=\"w-16 h-16 rounded-full bg-primary/10 flex items-center justify-center\">\n              <ImageIcon className=\"w-8 h-8 text-primary\" />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Button\n                type=\"button\"\n                variant=\"default\"\n                size=\"lg\"\n                disabled={isUploading}\n                onClick={(e) => {\n                  e.stopPropagation();\n                  fileInputRef.current?.click();\n                }}\n                data-testid=\"button-upload-image\"\n              >\n                <Upload className=\"w-4 h-4 mr-2\" />\n                {isUploading ? \"Uploading...\" : \"Upload Image\"}\n              </Button>\n              \n              <p className=\"text-sm text-muted-foreground\">\n                or drag and drop your file here\n              </p>\n            </div>\n            \n            <p className=\"text-xs text-muted-foreground\">\n              Max 5MB • 16:9 aspect ratio recommended\n            </p>\n          </div>\n        </div>\n      )}\n\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={handleFileSelect}\n        className=\"hidden\"\n        data-testid=\"input-file\"\n      />\n    </div>\n  );\n}\n","size_bytes":6217},"client/src/components/RatingDisplay.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Star } from \"lucide-react\";\nimport type { Review } from \"@shared/schema\";\n\ninterface RatingDisplayProps {\n  appId: string;\n  appName: string;\n  creatorId?: string | null;\n}\n\nfunction StarRating({ rating, onRatingChange }: {\n  rating: number;\n  onRatingChange?: (rating: number) => void;\n}) {\n  const [hoveredStar, setHoveredStar] = useState<number | null>(null);\n  \n  const displayRating = hoveredStar !== null ? hoveredStar : rating;\n  \n  return (\n    <div className=\"flex gap-1\" onMouseLeave={() => setHoveredStar(null)}>\n      {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((star) => (\n        <button\n          key={star}\n          type=\"button\"\n          onClick={() => onRatingChange?.(star)}\n          onMouseEnter={() => setHoveredStar(star)}\n          className=\"cursor-pointer hover-elevate transition-transform active-elevate-2 rounded-sm\"\n          data-testid={`star-${star}`}\n        >\n          <Star\n            className={`h-5 w-5 transition-colors ${\n              star <= displayRating\n                ? \"fill-yellow-400 text-yellow-400\"\n                : \"text-muted-foreground\"\n            }`}\n          />\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport function RatingDisplay({ appId, appName, creatorId }: RatingDisplayProps) {\n  const { user, isAuthenticated, signInWithGoogle } = useAuth();\n  const { toast } = useToast();\n  const [isRatingDialogOpen, setIsRatingDialogOpen] = useState(false);\n  const [rating, setRating] = useState(0);\n\n  const { data: reviews = [] } = useQuery<Review[]>({\n    queryKey: [\"/api/apps\", appId, \"reviews\"],\n  });\n\n  const { data: ratingData } = useQuery<{ averageRating: number | null; ratingCount: number }>({\n    queryKey: [\"/api/apps\", appId, \"rating\"],\n  });\n\n  const userReview = reviews.find((review) => review.userId === user?.id);\n  const isCreator = user?.id === creatorId;\n  const avgRating = ratingData?.averageRating;\n  const ratingCount = ratingData?.ratingCount || 0;\n\n  useEffect(() => {\n    if (userReview && isRatingDialogOpen) {\n      setRating(userReview.rating);\n    } else if (!userReview && isRatingDialogOpen) {\n      setRating(0);\n    }\n  }, [userReview, isRatingDialogOpen]);\n\n  const submitRatingMutation = useMutation({\n    mutationFn: async (selectedRating: number) => {\n      if (selectedRating < 1) {\n        throw new Error(\"Please select a rating (minimum 1 star)\");\n      }\n      const response = await apiRequest(\"POST\", \"/api/reviews\", {\n        appId,\n        rating: selectedRating,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: userReview ? \"Rating Updated\" : \"Rating Submitted\",\n        description: \"Thank you for your feedback!\",\n      });\n      setIsRatingDialogOpen(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/apps\", appId, \"reviews\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/apps\", appId, \"rating\"] });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Please log in to rate.\",\n          variant: \"destructive\",\n        });\n        setIsRatingDialogOpen(false);\n        setTimeout(() => {\n          signInWithGoogle();\n        }, 500);\n        return;\n      }\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Failed to submit rating. Please try again.\",\n      });\n    },\n  });\n\n  const deleteRatingMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"DELETE\", `/api/reviews/${appId}`, {\n        deleteRating: true,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Rating Removed\",\n        description: \"Your rating has been removed.\",\n      });\n      setIsRatingDialogOpen(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/apps\", appId, \"reviews\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/apps\", appId, \"rating\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Failed to remove rating. Please try again.\",\n      });\n    },\n  });\n\n  const handleOpenRatingDialog = () => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please log in to rate this app.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        signInWithGoogle();\n      }, 500);\n      return;\n    }\n    setIsRatingDialogOpen(true);\n  };\n\n  const handleStarClick = (selectedRating: number) => {\n    setRating(selectedRating);\n    submitRatingMutation.mutate(selectedRating);\n  };\n\n  return (\n    <>\n      <div className=\"flex items-center justify-between\">\n        {appName && (\n          <h1 className=\"text-3xl md:text-4xl font-display font-bold\" data-testid=\"text-app-name\">\n            {appName}\n          </h1>\n        )}\n        \n        <div className={`flex items-start gap-0.5 ${!appName ? 'w-full justify-between' : ''}`}>\n          {/* App Rating */}\n          {avgRating !== null && avgRating !== undefined && (\n            <div className=\"flex flex-col items-center flex-1\">\n              <div className=\"text-xs font-medium text-muted-foreground mb-1\">APP RATING</div>\n              <div className=\"flex items-start gap-2\">\n                <Star className=\"h-6 w-6 fill-yellow-400 text-yellow-400 mt-0.5\" />\n                <div className=\"flex flex-col\">\n                  <div className=\"flex items-baseline gap-1\">\n                    <span className=\"text-2xl font-bold leading-none\" data-testid=\"text-average-rating\">\n                      {avgRating.toFixed(1)}\n                    </span>\n                    <span className=\"text-sm text-muted-foreground\">/10</span>\n                  </div>\n                  <div className=\"text-xs text-muted-foreground mt-0.5\">\n                    {ratingCount.toLocaleString()} {ratingCount === 1 ? 'rating' : 'ratings'}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* User Rating */}\n          {isAuthenticated && !isCreator && (\n            <div className=\"flex flex-col items-center flex-1\">\n              <div className=\"text-xs font-medium text-muted-foreground mb-1\">YOUR RATING</div>\n              <button\n                onClick={handleOpenRatingDialog}\n                className=\"flex items-start gap-2 hover-elevate active-elevate-2 px-3 py-2 rounded-md transition-all\"\n                data-testid=\"button-rate\"\n              >\n                <Star className={`h-6 w-6 ${userReview ? 'fill-blue-500 text-blue-500' : 'text-muted-foreground'} mt-0.5`} />\n                {userReview ? (\n                  <div className=\"flex items-baseline gap-1\">\n                    <span className=\"text-2xl font-bold leading-none\">{userReview.rating}</span>\n                    <span className=\"text-sm text-muted-foreground\">/10</span>\n                  </div>\n                ) : (\n                  <span className=\"text-sm text-muted-foreground\">Rate</span>\n                )}\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Rating Dialog */}\n      <Dialog open={isRatingDialogOpen} onOpenChange={setIsRatingDialogOpen}>\n        <DialogContent className=\"sm:max-w-[500px]\" data-testid=\"dialog-rate\">\n          <DialogHeader>\n            <DialogTitle>Your Rating</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div>\n              <StarRating rating={rating} onRatingChange={handleStarClick} />\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                {rating === 0 ? \"Click a star to rate\" : `${rating}/10`}\n              </p>\n            </div>\n            <div className=\"flex gap-2 justify-end pt-4\">\n              {userReview && (\n                <Button\n                  variant=\"outline\"\n                  onClick={() => deleteRatingMutation.mutate()}\n                  disabled={deleteRatingMutation.isPending}\n                  data-testid=\"button-remove-rating\"\n                >\n                  {deleteRatingMutation.isPending ? \"Removing...\" : \"Remove Rating\"}\n                </Button>\n              )}\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsRatingDialogOpen(false)}\n                data-testid=\"button-cancel-rating\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":9087},"client/src/components/ReviewsSection.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Star, User as UserIcon, Pencil, Trash2, Plus } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { Review, User as UserType } from \"@shared/schema\";\n\ninterface ReviewWithUser extends Review {\n  user?: UserType;\n}\n\ninterface ReviewsSectionProps {\n  appId: string;\n  creatorId?: string | null;\n}\n\nfunction StarRating({ rating, onRatingChange }: {\n  rating: number;\n  onRatingChange?: (rating: number) => void;\n}) {\n  const [hoveredStar, setHoveredStar] = useState<number | null>(null);\n  \n  const displayRating = hoveredStar !== null ? hoveredStar : rating;\n  \n  return (\n    <div className=\"flex gap-1\" onMouseLeave={() => setHoveredStar(null)}>\n      {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((star) => (\n        <button\n          key={star}\n          type=\"button\"\n          onClick={() => onRatingChange?.(star)}\n          onMouseEnter={() => setHoveredStar(star)}\n          className=\"cursor-pointer hover-elevate transition-transform active-elevate-2 rounded-sm\"\n          data-testid={`review-star-${star}`}\n        >\n          <Star\n            className={`h-5 w-5 transition-colors ${\n              star <= displayRating\n                ? \"fill-yellow-400 text-yellow-400\"\n                : \"text-muted-foreground\"\n            }`}\n          />\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport function ReviewsSection({ appId, creatorId }: ReviewsSectionProps) {\n  const { user, isAuthenticated, signInWithGoogle } = useAuth();\n  const { toast } = useToast();\n  const [isReviewDialogOpen, setIsReviewDialogOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [reviewText, setReviewText] = useState(\"\");\n  const [rating, setRating] = useState(0);\n  const [editingReviewId, setEditingReviewId] = useState<string | null>(null);\n\n  const { data: reviews = [] } = useQuery<ReviewWithUser[]>({\n    queryKey: [\"/api/apps\", appId, \"reviews\"],\n  });\n\n  const userReview = reviews.find((review) => review.userId === user?.id);\n  const isCreator = user?.id === creatorId;\n  const reviewsWithText = reviews.filter(review => review.body);\n\n  const submitReviewMutation = useMutation({\n    mutationFn: async () => {\n      if (!reviewText.trim()) {\n        throw new Error(\"Please enter a review\");\n      }\n      if (rating < 1) {\n        throw new Error(\"Please select a rating (minimum 1 star)\");\n      }\n      \n      const response = await apiRequest(\"POST\", \"/api/reviews\", {\n        appId,\n        body: reviewText.trim(),\n        rating: rating,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: editingReviewId ? \"Review Updated\" : \"Review Submitted\",\n        description: \"Thank you for your feedback!\",\n      });\n      setIsReviewDialogOpen(false);\n      setReviewText(\"\");\n      setEditingReviewId(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/apps\", appId, \"reviews\"] });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Please log in to submit a review.\",\n          variant: \"destructive\",\n        });\n        setIsReviewDialogOpen(false);\n        setTimeout(() => {\n          signInWithGoogle();\n        }, 500);\n        return;\n      }\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Failed to submit review. Please try again.\",\n      });\n    },\n  });\n\n  const deleteReviewMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"DELETE\", `/api/reviews/${appId}?deleteRating=false`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Review Deleted\",\n        description: \"Your review has been deleted, but your rating remains.\",\n      });\n      setIsDeleteDialogOpen(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/apps\", appId, \"reviews\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Failed to delete review. Please try again.\",\n      });\n    },\n  });\n\n  const handleOpenReviewDialog = (edit = false) => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please log in to write a review.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        signInWithGoogle();\n      }, 500);\n      return;\n    }\n\n    if (edit && userReview?.body) {\n      setReviewText(userReview.body);\n      setRating(userReview.rating);\n      setEditingReviewId(userReview.id);\n    } else {\n      setReviewText(\"\");\n      setRating(userReview?.rating || 0);\n      setEditingReviewId(null);\n    }\n    setIsReviewDialogOpen(true);\n  };\n\n  return (\n    <Card className=\"p-6\" id=\"reviews-section\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-2xl font-heading font-bold\">Reviews</h2>\n        {isAuthenticated && !isCreator && (\n          <Button\n            onClick={() => handleOpenReviewDialog(false)}\n            size=\"sm\"\n            data-testid=\"button-add-review\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Review\n          </Button>\n        )}\n      </div>\n\n      {/* Review Dialog */}\n      <Dialog open={isReviewDialogOpen} onOpenChange={setIsReviewDialogOpen}>\n        <DialogContent className=\"sm:max-w-[500px]\" data-testid=\"dialog-review\">\n          <DialogHeader>\n            <DialogTitle>{editingReviewId ? \"Edit Your Review\" : \"Write a Review\"}</DialogTitle>\n            <DialogDescription>\n              Share your experience with this app\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Your Rating</label>\n              <StarRating rating={rating} onRatingChange={setRating} />\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                {rating === 0 ? \"Click a star to rate\" : `${rating}/10`}\n              </p>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Your Review</label>\n              <Textarea\n                placeholder=\"Share your thoughts about this app...\"\n                value={reviewText}\n                onChange={(e) => setReviewText(e.target.value)}\n                maxLength={1000}\n                rows={5}\n                data-testid=\"textarea-review\"\n              />\n              <div className=\"text-xs text-muted-foreground mt-1\">\n                {reviewText.length}/1000 characters\n              </div>\n            </div>\n            <div className=\"flex gap-2 justify-end\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsReviewDialogOpen(false)}\n                data-testid=\"button-cancel-review\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={() => submitReviewMutation.mutate()}\n                disabled={submitReviewMutation.isPending || !reviewText.trim() || rating < 1}\n                data-testid=\"button-submit-review\"\n              >\n                {submitReviewMutation.isPending ? \"Submitting...\" : editingReviewId ? \"Update Review\" : \"Submit Review\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n        <AlertDialogContent data-testid=\"dialog-delete-review\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Review</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete your review? Your rating will remain. This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deleteReviewMutation.mutate()}\n              disabled={deleteReviewMutation.isPending}\n              data-testid=\"button-confirm-delete\"\n            >\n              {deleteReviewMutation.isPending ? \"Deleting...\" : \"Delete\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Reviews List */}\n      <div className=\"space-y-4\">\n        {reviewsWithText.length === 0 ? (\n          <p className=\"text-muted-foreground text-center py-8\">\n            No reviews yet. Be the first to review this app!\n          </p>\n        ) : (\n          reviewsWithText.map((review) => (\n            <div key={review.id} className=\"border-b last:border-0 pb-4 last:pb-0\" data-testid={`review-${review.id}`}>\n              <div className=\"flex items-start gap-3\">\n                <Avatar className=\"h-10 w-10\">\n                  <AvatarImage src={review.user?.profilePictureUrl || undefined} />\n                  <AvatarFallback>\n                    <UserIcon className=\"h-5 w-5\" />\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"flex-1\">\n                  <div className=\"flex items-start justify-between mb-1\">\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium\" data-testid={`review-author-${review.id}`}>\n                        {review.user?.name?.split(\" \")[0] || review.user?.email || \"Anonymous\"}\n                      </p>\n                      <div className=\"flex items-center gap-2 mt-1\">\n                        <div className=\"flex items-center gap-1\">\n                          <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                          <span className=\"text-sm font-medium\">{review.rating}/10</span>\n                        </div>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {review.createdAt && formatDistanceToNow(new Date(review.createdAt), { addSuffix: true })}\n                        </span>\n                      </div>\n                    </div>\n                    {review.userId === user?.id && (\n                      <div className=\"flex gap-2 ml-4\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleOpenReviewDialog(true)}\n                          data-testid=\"button-edit-review\"\n                        >\n                          <Pencil className=\"h-4 w-4 mr-1\" />\n                          Edit\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => setIsDeleteDialogOpen(true)}\n                          data-testid=\"button-delete-review\"\n                        >\n                          <Trash2 className=\"h-4 w-4 mr-1\" />\n                          Delete\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                  {review.body && (\n                    <p className=\"text-sm text-secondary-foreground mt-2\" data-testid={`review-text-${review.id}`}>\n                      {review.body}\n                    </p>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":12426},"client/src/pages/EditAppPage.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Link, useLocation, useRoute } from \"wouter\";\nimport { insertAppSchema, type Category, type Tool, type AppListing } from \"@shared/schema\";\nimport type { InsertApp } from \"@shared/schema\";\nimport { ImageUpload } from \"../components/ImageUpload\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ArrowLeft, Upload, Check, AlertCircle, X } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\n\nexport default function EditAppPage() {\n  const [, setLocation] = useLocation();\n  const [, params] = useRoute(\"/app/:id/edit\");\n  const appId = params?.id;\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, signInWithGoogle, user } = useAuth();\n  \n  const [tagNames, setTagNames] = useState<string[]>([]);\n  const [tagInput, setTagInput] = useState(\"\");\n  const [selectedToolIds, setSelectedToolIds] = useState<string[]>([]);\n  const [otherToolName, setOtherToolName] = useState(\"\");\n  const [isOtherToolSelected, setIsOtherToolSelected] = useState(false);\n\n  // Fetch the app data\n  const { data: app, isLoading: appLoading } = useQuery<AppListing>({\n    queryKey: [`/api/apps/${appId}`],\n    enabled: !!appId,\n  });\n\n  const { data: categories, isLoading: categoriesLoading } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const { data: tools, isLoading: toolsLoading } = useQuery<Tool[]>({\n    queryKey: [\"/api/tools\"],\n  });\n\n  const form = useForm<InsertApp>({\n    resolver: zodResolver(insertAppSchema),\n    defaultValues: {\n      name: \"\",\n      shortDescription: \"\",\n      fullDescription: \"\",\n      launchUrl: \"\",\n      screenshotUrl: \"\",\n      keyLearnings: \"\",\n      status: \"published\",\n      creatorId: \"\",\n      categoryId: \"\",\n    },\n  });\n\n  // Check if user is creator\n  useEffect(() => {\n    if (app && user && app.creatorId !== user.id) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You don't have permission to edit this app.\",\n        variant: \"destructive\",\n      });\n      setLocation(`/app/${appId}`);\n    }\n  }, [app, user, appId, setLocation, toast]);\n\n  // Pre-populate form when app data is loaded\n  useEffect(() => {\n    if (app) {\n      form.reset({\n        name: app.name,\n        shortDescription: app.shortDescription,\n        fullDescription: app.fullDescription,\n        launchUrl: app.launchUrl,\n        screenshotUrl: app.previewImage,\n        keyLearnings: app.keyLearnings || \"\",\n        status: \"published\",\n        creatorId: app.creatorId || \"\",\n        categoryId: app.categoryId || \"\",\n      });\n\n      // Set tags\n      if (app.tags) {\n        setTagNames(app.tags);\n      }\n\n      // Set tools\n      if (app.vibecodingTools) {\n        const toolIds: string[] = [];\n        app.vibecodingTools.forEach((toolName: string) => {\n          const tool = tools?.find(t => t.name === toolName);\n          if (tool) {\n            toolIds.push(tool.id);\n          }\n        });\n        setSelectedToolIds(toolIds);\n      }\n    }\n  }, [app, form, tools]);\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: InsertApp & { toolIds?: string[], tagNames?: string[], otherToolName?: string }) => {\n      const response = await apiRequest(\"PATCH\", `/api/apps/${appId}`, data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Success!\",\n        description: \"Your app has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/apps/${appId}`] });\n      setLocation(`/app/${appId}`);\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Failed to update app. Please try again.\",\n      });\n    },\n  });\n\n  const addTag = () => {\n    if (tagInput.trim() && tagNames.length < 5 && !tagNames.includes(tagInput.trim())) {\n      setTagNames([...tagNames, tagInput.trim()]);\n      setTagInput(\"\");\n    }\n  };\n\n  const removeTag = (tagToRemove: string) => {\n    setTagNames(tagNames.filter(tag => tag !== tagToRemove));\n  };\n\n  const onSubmit = async (data: InsertApp) => {\n    if (!isAuthenticated || !user) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please log in to update this app.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        signInWithGoogle();\n      }, 500);\n      return;\n    }\n\n    const finalToolIds = isOtherToolSelected \n      ? [...selectedToolIds.filter(id => id !== \"other\")] \n      : selectedToolIds;\n\n    updateMutation.mutate({\n      ...data,\n      toolIds: finalToolIds,\n      tagNames: tagNames,\n      otherToolName: isOtherToolSelected ? otherToolName : undefined,\n    });\n  };\n\n  if (appLoading || categoriesLoading || toolsLoading || isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!app) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-display font-semibold mb-4\">App not found</h2>\n          <Link href=\"/\">\n            <Button>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Home\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background py-12\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <Link href={`/app/${appId}`}>\n            <Button variant=\"ghost\" className=\"mb-4\" data-testid=\"button-back-to-app\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to App\n            </Button>\n          </Link>\n          <h1 className=\"text-4xl font-display font-bold mb-2\">Edit Your App</h1>\n          <p className=\"text-muted-foreground\">Update your app's information below.</p>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n            <Card className=\"p-6 space-y-6\">\n              <h2 className=\"text-2xl font-display font-semibold\">Basic Information</h2>\n              \n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>App Name *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"My Awesome App\" \n                        {...field} \n                        data-testid=\"input-app-name\"\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Max 100 characters\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"shortDescription\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Short Description *</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"A brief description of what your app does\" \n                        className=\"resize-none h-20\"\n                        {...field} \n                        data-testid=\"input-short-description\"\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Max 200 characters - This appears on the app card\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"fullDescription\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Full Description *</FormLabel>\n                    <Tabs defaultValue=\"edit\" className=\"w-full\">\n                      <TabsList>\n                        <TabsTrigger value=\"edit\">Edit</TabsTrigger>\n                        <TabsTrigger value=\"preview\">Preview</TabsTrigger>\n                      </TabsList>\n                      <TabsContent value=\"edit\">\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"Tell us more about your app. You can use Markdown formatting!\" \n                            className=\"min-h-[200px] font-mono text-sm\"\n                            {...field}\n                            data-testid=\"input-full-description\"\n                          />\n                        </FormControl>\n                      </TabsContent>\n                      <TabsContent value=\"preview\">\n                        <div className=\"prose prose-slate max-w-none min-h-[200px] p-4 border rounded-md bg-muted/20\">\n                          <ReactMarkdown remarkPlugins={[remarkGfm]}>\n                            {field.value || \"*No content yet*\"}\n                          </ReactMarkdown>\n                        </div>\n                      </TabsContent>\n                    </Tabs>\n                    <FormDescription>\n                      Supports Markdown formatting (headers, lists, links, etc.)\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"launchUrl\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Launch URL *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"https://your-app.com\" \n                        type=\"url\"\n                        {...field}\n                        data-testid=\"input-launch-url\"\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      The live URL where users can access your app\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </Card>\n\n            <Card className=\"p-6 space-y-6\">\n              <h2 className=\"text-2xl font-display font-semibold\">Categorization</h2>\n              \n              <div>\n                <Label className=\"text-base font-medium mb-3 block\">Vibecoding Tools Used *</Label>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Select all AI-powered coding tools you used to build this app\n                </p>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                  {tools?.map((tool) => (\n                    <div key={tool.id} className=\"flex items-center space-x-2\">\n                      <Checkbox \n                        id={`tool-${tool.id}`}\n                        checked={selectedToolIds.includes(tool.id)}\n                        onCheckedChange={(checked) => {\n                          if (checked) {\n                            setSelectedToolIds([...selectedToolIds, tool.id]);\n                          } else {\n                            setSelectedToolIds(selectedToolIds.filter(id => id !== tool.id));\n                          }\n                        }}\n                        data-testid={`checkbox-tool-${tool.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                      />\n                      <label\n                        htmlFor={`tool-${tool.id}`}\n                        className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer\"\n                      >\n                        {tool.name}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"categoryId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Category *</FormLabel>\n                    <FormControl>\n                      <RadioGroup\n                        onValueChange={field.onChange}\n                        value={field.value}\n                        className=\"grid grid-cols-1 md:grid-cols-2 gap-3\"\n                      >\n                        {categories?.map((category) => (\n                          <div key={category.id} className=\"flex items-center space-x-2\">\n                            <RadioGroupItem value={category.id} id={`category-${category.id}`} data-testid={`radio-category-${category.name.toLowerCase()}`} />\n                            <Label htmlFor={`category-${category.id}`} className=\"cursor-pointer\">\n                              {category.name}\n                            </Label>\n                          </div>\n                        ))}\n                      </RadioGroup>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div>\n                <Label className=\"text-base font-medium mb-2 block\">Tags (Optional)</Label>\n                <p className=\"text-sm text-muted-foreground mb-3\">\n                  Add up to 5 tags to help people discover your app\n                </p>\n                <div className=\"flex gap-2 mb-3\">\n                  <Input\n                    placeholder=\"Enter a tag\"\n                    value={tagInput}\n                    onChange={(e) => setTagInput(e.target.value)}\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter') {\n                        e.preventDefault();\n                        addTag();\n                      }\n                    }}\n                    disabled={tagNames.length >= 5}\n                    data-testid=\"input-tag\"\n                  />\n                  <Button\n                    type=\"button\"\n                    onClick={addTag}\n                    disabled={!tagInput.trim() || tagNames.length >= 5}\n                    data-testid=\"button-add-tag\"\n                  >\n                    Add\n                  </Button>\n                </div>\n                <div className=\"flex flex-wrap gap-2\">\n                  {tagNames.map((tag) => (\n                    <Badge key={tag} variant=\"secondary\" className=\"pl-3 pr-1 py-1\" data-testid={`badge-tag-${tag}`}>\n                      {tag}\n                      <button\n                        type=\"button\"\n                        onClick={() => removeTag(tag)}\n                        className=\"ml-1 hover:bg-secondary-foreground/20 rounded-full p-0.5\"\n                        data-testid={`button-remove-tag-${tag}`}\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </button>\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"p-6 space-y-6\">\n              <h2 className=\"text-2xl font-display font-semibold\">App Screenshot</h2>\n              <FormField\n                control={form.control}\n                name=\"screenshotUrl\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Preview Image *</FormLabel>\n                    <FormControl>\n                      <ImageUpload\n                        value={field.value}\n                        onChange={field.onChange}\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Upload a screenshot or preview image of your app (max 5MB, image formats only)\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </Card>\n\n            <Card className=\"p-6 space-y-6\">\n              <h2 className=\"text-2xl font-display font-semibold\">Key Learnings (Optional)</h2>\n              <FormField\n                control={form.control}\n                name=\"keyLearnings\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Share Your Insights</FormLabel>\n                    <Tabs defaultValue=\"edit\" className=\"w-full\">\n                      <TabsList>\n                        <TabsTrigger value=\"edit\">Edit</TabsTrigger>\n                        <TabsTrigger value=\"preview\">Preview</TabsTrigger>\n                      </TabsList>\n                      <TabsContent value=\"edit\">\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"What did you learn while building this app? Share tips and insights for others!\" \n                            className=\"min-h-[150px] font-mono text-sm\"\n                            {...field}\n                            data-testid=\"input-key-learnings\"\n                          />\n                        </FormControl>\n                      </TabsContent>\n                      <TabsContent value=\"preview\">\n                        <div className=\"prose prose-slate max-w-none min-h-[150px] p-4 border rounded-md bg-muted/20\">\n                          <ReactMarkdown remarkPlugins={[remarkGfm]}>\n                            {field.value || \"*No content yet*\"}\n                          </ReactMarkdown>\n                        </div>\n                      </TabsContent>\n                    </Tabs>\n                    <FormDescription>\n                      Share what you learned, challenges you faced, and tips for others. Supports Markdown.\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </Card>\n\n            <div className=\"flex gap-4\">\n              <Button\n                type=\"submit\"\n                size=\"lg\"\n                disabled={updateMutation.isPending}\n                className=\"flex-1\"\n                data-testid=\"button-update-app\"\n              >\n                {updateMutation.isPending ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Updating...\n                  </>\n                ) : (\n                  <>\n                    <Check className=\"w-4 h-4 mr-2\" />\n                    Update App\n                  </>\n                )}\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"lg\"\n                onClick={() => setLocation(`/app/${appId}`)}\n                data-testid=\"button-cancel-edit\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20417}},"version":2}